<%- include("../../views/partials/user/header") %>
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= product.productname %> - Product Details</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/zooming/2.1.1/zooming.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style>
    /* Base Styles */
    body {
      background-color: #f8f9fa;
    }
  
    h1 {
      font-size: 2.5rem;
      font-weight: bold;
    }
  
    /* Card Styles */
    .card {
      border-radius: 12px;
      border: 1px solid #ddd;
      transition: transform 0.3s, box-shadow 0.3s;
    }
  
    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
    }
  
    .card-body {
      padding: 2rem;
    }
  
    /* Product Gallery */
    .product-gallery {
      position: relative;
      margin-bottom: 2rem;
    }
  
    .carousel-inner img {
      max-height: 800px;
      object-fit: contain;
    }
  
    .product-thumbnails {
      overflow-x: auto;
      white-space: nowrap;
      scrollbar-width: none;
    }
  
    .product-thumbnails::-webkit-scrollbar {
      display: none;
    }
  
    .thumbnail-item {
      cursor: pointer;
      width: 80px;
      height: 80px;
      overflow: hidden;
    }
  
    .thumbnail-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: opacity 0.2s;
    }
  
    .thumbnail-item:hover img {
      opacity: 0.8;
    }
  
    /* Product Details */
    .product-title {
      color: #333;
      font-size: 2rem;
    }
  
    .price-display {
      display: flex;
      align-items: baseline;
      gap: 1rem;
    }
  
    .original-price {
      font-size: 1.2rem;
      color: #999;
    }
  
    .current-price {
      color: #28a745;
    }
  
    /* Image Zoom Effect */
    .zoom-image {
      transition: transform 0.3s ease;
      cursor: pointer;
    }
  
    .zoom-image:hover {
      transform: scale(1.1);
    }
  
    .zoomWindow {
      border: 1px solid #000;
      background: white;
      z-index: 1000;
    }
  
    /* Breadcrumb Styles */
    .breadcrumb {
      background-color: #f8f9fa;
      font-size: 1rem;
      border-radius: 0.25rem;
    }
  
    .breadcrumb-item a {
      color: #007bff;
      text-decoration: none;
    }
  
    .breadcrumb-item.active {
      color: #6c757d;
    }
  
    /* Star Rating System */
    .star-rating {
      display: flex;
      flex-direction: row-reverse;
      justify-content: start;
      gap: 5px;
    }
  
    .star-rating input {
      display: none;
    }
  
    .star-rating label {
      font-size: 25px;
      color: gray;
      cursor: pointer;
    }
  
    .star-rating input:checked ~ label,
    .star-rating label:hover,
    .star-rating label:hover ~ label {
      color: gold;
    }
  
    .stars {
      font-size: 30px;
      color: #ccc;
    }
  
    .stars .filled,
    .stars .star.filled {
      color: gold;
    }
  
    /* Review Container */
    .review-container {
      max-width: 600px;
      margin: 20px auto;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 8px;
      background-color: #f9f9f9;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
    }
  
    .review-container:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
  
    .review-container h2 {
      font-size: 24px;
      margin-bottom: 15px;
      color: #333;
      text-align: center;
    }
  
    .review-container ul {
      list-style-type: none;
      padding: 0;
    }
  
    .review-container li {
      border-bottom: 1px solid #ddd;
      padding: 10px 0;
      transition: background-color 0.3s ease;
    }
  
    .review-container li:hover {
      background-color: #f1f1f1;
    }
  
    /* Toast Notifications */
    .toast-container {
      z-index: 1055;
    }
  
    .toast {
      opacity: 0;
      transform: translateY(-100%);
      transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    }
  
    .toast.show {
      opacity: 1;
      transform: translateY(0);
    }
  
    .toast-header {
      background-color: #343a40;
      color: #fff;
    }
  
    .toast-body {
      background-color: #9f211d;
      color: #fff;
    }
  
    /* Offer Badge */
    .offer-badge {
      background: red;
      width: 120px;
      color: white;
      padding: 8px 12px;
      font-size: 14px;
      font-weight: bold;
      border-radius: 5px;
      animation: fadeIn 1s ease-in-out, bounce 2s infinite;
    }
  
    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.8); }
      to { opacity: 1; transform: scale(1); }
    }
  
    @keyframes bounce {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-5px); }
    }
  
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
  
    @keyframes slideOut {
      from { transform: translateX(0); opacity: 1; }
      to { transform: translateX(100%); opacity: 0; }
    }
  
    /* Responsive Styles */
    @media (max-width: 768px) {
      .product-title {
        font-size: 1.5rem;
      }
      
      .carousel-inner img {
        max-height: 800px;
      }
    }
  </style>
  
</head>

<body>
  <!-- BREADCRUMBS -->
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/shop">Products</a></li>
      <li class="breadcrumb-item active" aria-current="page"><%= product.productname %></li>
    </ol>
  </nav>

  <!-- STARTING -->
<!-- Product Container -->
<div class="container-fluid px-4 py-5">
  <div class="row">
    <!-- Product Image Section -->
    <div class="col-lg-7 pe-lg-5">
      <div class="product-gallery">
        <div id="productImagesCarousel" class="carousel slide" data-bs-ride="carousel">
          <div class="carousel-inner rounded-4 shadow-sm">
            <% product.productImage.forEach((image, index) => { %>
              <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                <img id="zoom-image-<%= index %>" 
                     src="/uploads/product-images/<%= image %>" 
                     data-zoom-image="/uploads/product-images/<%= image %>" 
                     class="d-block w-100 zoom-image" 
                     alt="<%= product.productname %> Image <%= index + 1 %>">
              </div>
            <% }) %>
          </div>
          
          <!-- Thumbnail Navigation -->
          <div class="product-thumbnails mt-3 d-flex justify-content-center">
            <% product.productImage.forEach((image, index) => { %>
              <div class="thumbnail-item mx-2" onclick="$('#productImagesCarousel').carousel(<%= index %>)">
                <img src="/uploads/product-images/<%= image %>" 
                     class="img-thumbnail" 
                     alt="Thumbnail <%= index + 1 %>">
              </div>
            <% }) %>
          </div>
        </div>
      </div>
    </div>

    <!-- Product Details Section -->
    <div class="col-lg-5">
      <div class="product-details ps-lg-4">
        <% if (categoryOffer > 0) { %>
  
          <div class="offer-badge animate-offer">
            <span><%= categoryOffer%>% HOT OFF</span>
          </div>
        <% } %>
        <div class="d-flex justify-content-between align-items-start mb-3">
          <h2 class="product-title fw-bold mb-0"><%= product.productname %>
          </h2>
          <div id="wishlistButton">
            <button class="btn btn-outline-danger rounded-circle add-to-wishlist" data-product-id="<%= product._id%>">
              <i class="fas fa-heart"></i>
            </button>
          </div>
        </div>

        <!-- Price Section -->
        <div class="pricing-section mb-4">
          <div class="price-display">
            <span class="original-price text-decoration-line-through text-muted">₹<%= product.mainPrice %></span>
            <span class="current-price fs-2 fw-bold text-success">₹<%= product.salePrice %> <span class="fs-4  text-warning">/ <%=product.unit %> </span></span>
          </div>
        </div>
        <div class="product-info mb-4">
          <div class="specs">
            <div class="spec-item d-flex border-bottom py-2">
              <span class="spec-label fw-bold w-25">Description:</span>
              <span class="spec-value"><%= product.description %></span>
            </div>
            <div class="spec-item d-flex border-bottom py-2">
              <span class="spec-label fw-bold w-25">Category:</span>
              <span class="spec-value"><%= product.category.name %></span>
            </div>
            <div class="spec-item d-flex border-bottom py-2">
              <span class="spec-label fw-bold w-25">Tags:</span>
              <span class="spec-value"><%= product.tag %></span>
            </div>
            <div class="spec-item d-flex border-bottom py-2">
              <span class="spec-label fw-bold w-25">Stock:</span>
              <%if(product.quantity >= 5){%>
              <span class="spec-value text-success"><%= product.quantity %> <%= product.unit %></span>
              <%}else if(product.quantity<5 && product.quantity >0){%>
              <span class="spec-value text-warning">few only! <%=product.quantity %> <%= product.unit %> left , buy now!</span>
              <%}else if(product.quantity==0){%>
                <span class="spec-value text-danger">Out of stock</span>   
              <%}%>             
            </div>
          </div>
        </div>
<!-- for users products -->
        <% if (product.userId) { %>
  <div class="farmer-info mb-4">
    <h4 class="border-bottom pb-2 mb-3"> 🌾 Farm Product & Farmer Details</h4>
    <div class="card bg-light">
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <div class="mb-2">
              <i class="fas fa-user-alt me-2 text-primary"></i>
              <strong>Farm Name:</strong>
              <span><%= product.userId.farmName || 'Not specified' %></span>
            </div>
            <div class="mb-2">
              <i class="fas fa-map-marker-alt me-2 text-danger"></i>
              <strong>Location:</strong>
              <span><%= product.userId.location || 'Not specified' %></span>
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-2">
              <i class="fas fa-map me-2 text-success"></i>
              <strong>District:</strong>
              <span><%= product.userId.district || 'Not specified' %></span>
            </div>
            <div class="mb-2">
              <i class="fas fa-star me-2 text-warning"></i>
              <strong>Experience:</strong>
              <span><%= product.userId.yearsOfExperience ? `${product.userId.yearsOfExperience} years` : 'Not specified' %></span>
            </div>
          </div>
        </div>
        <% if (product.userId.isVerified) { %>
          <div class="mt-2 text-success">
            <i class="fas fa-check-circle"></i>
            <small>Verified Farmer</small>
          </div>
        <% } %>
      </div>
    </div>
  </div>
<% } %>

        <!-- Quantity Selector -->
<div class="quantity-selector mb-4">
  <label class="form-label fw-bold">Quantity (<%= product.unit %>) </label> <!-- Dynamically show unit -->
  <div class="input-group quantity-input">
    <button class="btn btn-outline-primary" type="button" id="decreaseQuantity">-</button>
    
    <!-- Set value and step from backend -->
    <input 
      type="text" 
      class="form-control text-center" 
      id="quantity" 
      value="<%= product.unitStep || 1 %> " 
      readonly
    >
  <span class="input-group-text"><%= product.unit %></span>
    <button class="btn btn-outline-primary" type="button" id="increaseQuantity">+</button>
  </div>
</div>

        <!-- Action Buttons -->
        <div class="action-buttons">
          <button class="btn btn-primary btn-lg w-100 mb-2" id="addToCartButton" onclick="addToCart('<%=product._id%>')">
            <i class="fas fa-shopping-cart me-2"></i>Add to Cart
          </button>
        </div>

        <!-- Promotional Banner -->
        <div class="promo-banner bg-warning bg-opacity-10 p-3 rounded-3 mt-4">
          <div class="d-flex align-items-center">
            <i class="fas fa-gift text-warning fs-4 me-3"></i>
            <div>
              <h6 class="mb-1">Special Offer!</h6>
              <p class="mb-0 small">Get ₹100 OFF on orders above ₹500. Use code: <span class="fw-bold text-danger">AS2</span></p>
            </div>
          </div>
        </div>
  <!-- Reviews Section -->
  <div class="reviews-section mt-5">
    <h3 class="section-title mb-4">Customer Reviews</h3>
    
    <!-- Review Form -->
    <% if (user) { %>
      <% if (hasPurchased) { %>
        <div class="review-form-container bg-light p-4 rounded-3 mb-4">
          <form id="reviewForm" action="/products/<%= product._id %>/review" method="POST">
            <div class="mb-3">
              <label class="form-label">Rating</label>
              <div class="star-rating d-flex gap-2">
                <% for(let i=5; i>=1; i--) { %>
                  <input type="radio" id="star<%= i %>" name="rating" value="<%= i %>" required />
                  <label for="star<%= i %>" class="star-label">★</label>
                <% } %>
              </div>
            </div>
            <div class="mb-3">
              <label for="comment" class="form-label">Your Review</label>
              <textarea class="form-control" name="comment" rows="3" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit Review</button>
          </form>
        </div>
      <% } else { %>
        <div class="alert alert-warning">
          <i class="fas fa-info-circle me-2"></i>
          You need to purchase this product to write a review.
        </div>
      <% } %>
    <% } else { %>
      <div class="alert alert-info">
        <i class="fas fa-user-circle me-2"></i>
        Please <a href="/login" class="alert-link">login</a> to write a review.
      </div>
    <% } %>

    <!-- Reviews List -->
    <div class="reviews-list">
      <% if (product.reviews.length > 0) { %>
        <div class="row g-4">
          <% product.reviews.forEach(review => { %>
            <div class="col-md-6">
              <div class="review-card bg-light p-3 rounded-3">
                <div class="d-flex justify-content-between align-items-start mb-2">
                  <div>
                  <div style="display: flex; align-items: center; gap: 8px;">
  <img 
    src="<%= review.userId.userImage || '/images/backhome.jpg' %>" 
    alt="Profile" 
    class="rounded-circle" 
    style="width: 32px; height: 32px; object-fit: cover; border: 2px solid #fff;"
  >
  <h6 class="mb-0"><%= review.userId.firstname %> <%= review.userId.lastname %></h6>
</div>
                    <div class="stars">
                      <% for (let i = 1; i <= 5; i++) { %>
                        <span class="star <%= i <= review.rating ? 'filled' : '' %>">★</span>
                      <% } %>
                    </div>
                  </div>
                  <% if (user && user._id.equals(review.userId._id)) { %>
                    <button class="btn btn-sm btn-outline-danger" onclick="removeReview('<%= review._id %>')">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                  <% } %>
                </div>
                <p class="review-text mb-2"><%= review.comment %></p>
                <small class="text-muted">
                  <i class="far fa-calendar-alt me-1"></i>
                  <%= review.createdOn.toLocaleDateString() %>
                </small>
              </div>
            </div>
          <% }); %>
        </div>
      <% } else { %>
        <div class="text-center text-muted py-5">
          <i class="far fa-comment-alt fs-1 mb-3"></i>
          <p>No reviews yet. Be the first to review this product!</p>
        </div>
      <% } %>
    </div>
  </div>

  <!-- Back to Home -->
  <div class="text-center mt-5">
    <a href="/" class="btn btn-outline-dark">
      <i class="bi bi-arrow-left me-2"></i>Back to Home
    </a>
  </div>
</div>
</div>
</div>
</div>

  <!-- Toast Notification -->
  <div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toast-message" class="toast text-bg-success" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Notification</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Product added to cart successfully!
      </div>
    </div>
    <div id="toast-out-of-stock" class="toast text-bg-danger" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Notification</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Product is out of stock!
      </div>
    </div>

    <div id="toast-not-login" class="toast text-bg-danger" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Notification</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Please log in to add products to your cart !
      </div>
    </div>
  </div>

  <!-- Related Products Section -->
  <% if (relatedProducts && relatedProducts.length > 0) { %>
    <section>
      <div class="related-products mt-5 container">
        <h2 class="mb-4 text-danger text-center" style="font-size: 32px; font-weight: 900; font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;">
          RELATED PRODUCTS AND VARIANTS
        </h2>
        <div class="row">
          <% relatedProducts.forEach((relatedProduct) => { %>
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
              <div class="card shadow-sm h-100">
                <a href="/productDetails/<%= relatedProduct._id %>">
                  <% if (relatedProduct.categoryOffer > 0) { %>
                    <div class="offer-badge animate-offer">
                        <span><%= relatedProduct.categoryOffer %>% OFF</span>
                    </div>
                <% } %>
                  <img src="/uploads/product-images/<%= relatedProduct.productImage[0] %>" class="card-img-top product-img" alt="<%= relatedProduct.productname %>">
                </a>
                <div class="card-body d-flex flex-column justify-content-between">

                    <div class="position-absolute top-0 end-0 p-2">
                      <button class="btn btn-outline-danger btn-sm add-to-wishlist" data-product-id="<%= relatedProduct._id %>">
                          <i class="fas fa-heart"></i>
                      </button>
                  </div>
                  <h5 class="card-title fw-bold"><%= relatedProduct.productname %></h5>
                  <!-- prise -->
                  <p class="card-text text-muted">₹ <%= relatedProduct.mainPrice %></p>
                  <%if(relatedProduct.quantity >= 5){%>
                      <p class="card-text text-success   fw-bold"> <%=relatedProduct.quantity%> <%=relatedProduct.unit%> left</p>
                      <%}else{%>
                      <p class="card-text text-danger fw-bold"> <%=relatedProduct.quantity%><%if(relatedProduct.unit){%> <%=relatedProduct.unit%> <%}%>
                      </p>
                      <%}%>
                  <div class="star-rating">
                    <% for (let j = 1; j <= 5; j++) { %>
                        <span class="<%= j <= relatedProduct.averageRating? 'fas fa-star' : 'far fa-star'   %>"></span>
                    <% } %>
                </div> 
                  <div class="d-flex justify-content-between mt-3">
                    <button class="btn btn-cart btn-primary" onclick="addToCart('<%=relatedProduct._id%>')">
                      <i class="fas fa-shopping-cart"></i> Add to Cart
                    </button>
                  </div>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
      </div>
    </a>
    </section>
  <% } %> 
  <!-- notification -->
   <% if (categoryOffer > 0) { %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      showOfferToast('🔥 <%= categoryOffer %>% OFF on this category!');
    });
  </script>
<% } %>
   <!-- end -->
  <script>
    function showToast(message, isSuccess) {
      const toastElement = document.getElementById('toast-message');
      const toastBody = toastElement.querySelector('.toast-body');

      
      toastBody.textContent = message;
      if (isSuccess) {
          toastElement.classList.remove('text-bg-danger');
          toastElement.classList.add('text-bg-success');
      } else {
          toastElement.classList.remove('text-bg-success');
          toastElement.classList.add('text-bg-danger');
      }

      const toast = new bootstrap.Toast(toastElement);
      toast.show();
    }

    function showOutOfStockToast() {
      const toastElement = document.getElementById('toast-out-of-stock');
      const toast = new bootstrap.Toast(toastElement);
      toast.show();
    }

    function showusernotloginToast() {
      const toastElement = document.getElementById('toast-not-login');
      const toast = new bootstrap.Toast(toastElement);
      toast.show();
    }

    function addToCart(productId) {
    const userId = "<%= user ? user._id : '' %>"; 
    const unitStep = <%= product.unitStep %> || 1;
    const quantity = parseFloat(document.getElementById('quantity').value);

<<<<<<< HEAD
        if (!userId) {
            showusernotloginToast();
            return;
        }
        
        // First check existing cart quantity
        fetch(`/check-cart-quantity/${productId}`)
            .then(response => response.json())
            .then(data => {
                const existingQuantity = data.quantity || 0;
                const totalQuantity = existingQuantity + quantity;

                if (totalQuantity > 5) {
                    showToast(`You already have ${existingQuantity}kg of this product in cart. Cannot exceed 5 kg total.`, false);
                    return;
                }
=======
    // Check if quantity exceeds the limit (max 5 or available stock)
    if (quantity > 5) {
        showToast('You can only add up to 5 quantities of this product to your cart.', false);
        return;
    }
    if (quantity < unitStep) {
        showOutOfStockToast();
        return;
    }

    if (!userId) {
        showusernotloginToast();
        return;
    }

    fetch('/add-to-cart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            userId: userId,
            productId: productId,
            quantity: quantity
        })
    })
    .then(response => {
        return response.json().then(data => {
            if (!response.ok) {
                throw new Error(data.message || 'Network response was not ok');
            }
            return data;
        });
    })
    .then(data => {
        if (data.success) {
            showToast('Product added to cart successfully!', true);
        } else {
            showToast('Failed to add product to cart: ' + data.message, false);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Problem: ' + error.message, false);
    });
}

    // function addToCart(productId) {
    //     const userId = "<%= user ? user._id : '' %>"; 
    //     const quantity = parseInt(document.getElementById('quantity').value);
        
    //     // Check if quantity exceeds the limit//
    //     if (quantity > 5) {
    //         showToast('You can only add up to 5 quantities of this product to your cart.', false);
    //         return;
    //     }
    //     if (quantity == 0) {
    //         showOutOfStockToast();
    //         return;
    //     }

    //     if (!userId) {
    //         showusernotloginToast();
    //         return;
    //     }

    //     fetch('/add-to-cart', {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json',
    //         },
    //         body: JSON.stringify({
    //             userId: userId,
    //             productId: productId,
    //             quantity: quantity
    //         })
    //     })
    //     .then(response => {
    //         return response.json().then(data => {
    //             if (!response.ok) {
    //                 throw new Error(data.message || 'Network response was not ok');
    //             }
    //             return data;
    //         });
    //     })
    //     .then(data => {
    //         if (data.success) {
    //             showToast('Product added to cart successfully!', true);
    //         } else {
    //             showToast('Failed to add product to cart: ' + data.message, false);
    //         }
    //     })
    //     .catch(error => {
    //         console.error('Error:', error);
    //         showToast('Problem: ' + error.message, false);
    //     });
    // }
>>>>>>> subFarm

                // Proceed with adding to cart if quantity check passes
                return fetch('/add-to-cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        userId: userId,
                        productId: productId,
                        quantity: quantity
                    })
                });
            })
            .then(response => {
                if (!response) return; // If we returned early due to quantity check
                return response.json().then(data => {
                    if (!response.ok) {
                        throw new Error(data.message || 'Network response was not ok');
                    }
                    return data;
                });
            })
            .then(data => {
                if (!data) return; // If we returned early due to quantity check
                if (data.success) {
                    showToast('Product added to cart successfully!', true);
                } else {
                    showToast('Failed to add product to cart: ' + data.message, false);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Problem: ' + error.message, false);
            });
    }
    //zoom  ./////functionality../////
    document.addEventListener('DOMContentLoaded', function() {
      const zooming = new Zooming({
        bgColor: 'white',
        bgOpacity: 0.8,
        scaleBase: 0.8,
        scaleExtra: 1.2,
        scrollThreshold: 50,
        transitionDuration: 0.4
      });

      zooming.listen('.zoom-image');
    });
</script>
<script>
    // Get unit and step from backend
    const productUnit = "<%= product.unit %>"; // e.g. 'kg', 'litre', 'ml', 'piece'
    const unitStep = <%= product.unitStep %> || 1; // e.g. 0.5 for kg, 1 for piece
    const quantityInput = document.getElementById('quantity');
    const salePriceElement = document.getElementById('salePrice');
    const availableQuantityElement = document.getElementById('availableQuantity');
    const outOfStockMessage = document.getElementById('outOfStockMessage');
    const addToCartButton = document.getElementById('addToCartButton');
    const buyNowButton = document.getElementById('buyNowButton');
    const increaseQuantityButton = document.getElementById('increaseQuantity');
    const decreaseQuantityButton = document.getElementById('decreaseQuantity');
    const initialSalePrice = parseFloat("<%= product.salePrice %>");
    let availableQuantity = parseFloat("<%= product.quantity %>");
    const maxQuantity = Math.min(5, availableQuantity); // User can buy up to 5 units or available stock

    function updateUI() {
        let quantity = parseFloat(quantityInput.value);
        salePriceElement.textContent = (initialSalePrice * quantity).toFixed(2);
        availableQuantityElement.textContent = (availableQuantity - quantity).toFixed(2);

        if (availableQuantity - quantity < unitStep) {
            outOfStockMessage && (outOfStockMessage.style.display = 'block');
            addToCartButton && (addToCartButton.disabled = true);
            buyNowButton && (buyNowButton.disabled = true);
            increaseQuantityButton && (increaseQuantityButton.disabled = true);
            showOutOfStockToast && showOutOfStockToast();
        } else {
            outOfStockMessage && (outOfStockMessage.style.display = 'none');
            addToCartButton && (addToCartButton.disabled = false);
            buyNowButton && (buyNowButton.disabled = false);
            increaseQuantityButton && (increaseQuantityButton.disabled = quantity + unitStep > maxQuantity || quantity + unitStep > availableQuantity);
        }

        decreaseQuantityButton && (decreaseQuantityButton.disabled = quantity <= unitStep);
    }

    increaseQuantityButton.addEventListener('click', () => {
        let quantity = parseFloat(quantityInput.value);
        if (quantity + unitStep <= maxQuantity && quantity + unitStep <= availableQuantity) {
            quantity += unitStep;
            quantityInput.value = (unitStep === 1 ? quantity : quantity.toFixed(2).replace(/\.00$/, ''));
            updateUI();
        } else if (quantity >= maxQuantity) {
            showToast && showToast('You can only add up to 5 quantities of this product to your cart.', false);
        } else if (quantity >= availableQuantity) {
            showOutOfStockToast && showOutOfStockToast();
        }
    });

    decreaseQuantityButton.addEventListener('click', () => {
        let quantity = parseFloat(quantityInput.value);
        if (quantity - unitStep >= unitStep) {
            quantity -= unitStep;
            quantityInput.value = (unitStep === 1 ? quantity : quantity.toFixed(2).replace(/\.00$/, ''));
            updateUI();
        }
    });

    document.addEventListener('DOMContentLoaded', function() {
        quantityInput.value = unitStep;
        updateUI();
    });
</script>
<!-- 
 <script>
    const quantityInput = document.getElementById('quantity');
    const salePriceElement = document.getElementById('salePrice');
    const availableQuantityElement = document.getElementById('availableQuantity');
    const outOfStockMessage = document.getElementById('outOfStockMessage');
    const addToCartButton = document.getElementById('addToCartButton');
    const buyNowButton = document.getElementById('buyNowButton');
    const increaseQuantityButton = document.getElementById('increaseQuantity');
    const decreaseQuantityButton = document.getElementById('decreaseQuantity');
    const initialSalePrice = parseFloat("<%= product.salePrice %>");
    let availableQuantity = parseInt("<%= product.quantity %>");

    function updateUI() {
        const quantity = parseInt(quantityInput.value);
        salePriceElement.textContent = (initialSalePrice * quantity).toFixed(2);
        availableQuantityElement.textContent = availableQuantity - quantity;

        if (availableQuantity - quantity <= 0) {
            outOfStockMessage.style.display = 'block';
            addToCartButton.disabled = true;
            buyNowButton.disabled = true;
            increaseQuantityButton.disabled = true;
            showOutOfStockToast();
        } else {
            outOfStockMessage.style.display = 'none';
            addToCartButton.disabled = false;
            buyNowButton.disabled = false;
            increaseQuantityButton.disabled = quantity >= 5 || quantity >= availableQuantity;
        }

        decreaseQuantityButton.disabled = quantity <= 1;
    }

    increaseQuantityButton.addEventListener('click', () => {
        let quantity = parseInt(quantityInput.value);
        if (quantity < availableQuantity && quantity < 5) { // Limit to 5
            quantity++;
            quantityInput.value = quantity;
            updateUI();
        } else if (quantity >= 5) {
            showToast('You can only add up to 5 quantities of this product to your cart.', false);
        } else if (quantity >= availableQuantity) {
            showOutOfStockToast();
        }
    });

    decreaseQuantityButton.addEventListener('click', () => {
        let quantity = parseInt(quantityInput.value);
        if (quantity > 1) {
            quantity--;
            quantityInput.value = quantity;
            updateUI();
        }
    });

    document.addEventListener('DOMContentLoaded', updateUI);
</script>  -->
 <!-- Toast Notification -->
 <div class="toast-container position-fixed top-0 end-0 p-3">
  <div id="wishlistToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
          <strong class="me-auto">Notification</strong>
          <button  type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
          <!-- Toast message will be inserted here -->
      </div>
  </div>
</div>


<!-- wishlist -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
  document.addEventListener('DOMContentLoaded', function() {
      const wishlistButtons = document.querySelectorAll('.add-to-wishlist');
      const toastElement = document.getElementById('wishlistToast');
      const toastBody = toastElement.querySelector('.toast-body');
      const toast = new bootstrap.Toast(toastElement);

      wishlistButtons.forEach(button => {
          button.addEventListener('click', async function(event) {
              event.preventDefault();
              const productId = this.getAttribute('data-product-id');

              try {
                  const response = await fetch('/wishlist/add', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({ productId })
                  });

                  const result = await response.json();

                  if (result.success) {
                      toastBody.textContent = result.message;
                      toast.show();
                  } else {
                      toastBody.textContent = result.message;
                      toast.show();
                  }
              } catch (error) {
                  toastBody.textContent = 'An error occurred. Please try again later.';
                  toast.show();
              }
          });
      });
  });
  </script>

  <!--Add and  remove review -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.getElementById('reviewForm').addEventListener('submit', function(event) {
      event.preventDefault(); // Prevent the default form submission

      // Create an object to hold the form data
      const reviewData = {
          rating: this.rating.value, // Get the rating value
          comment: this.comment.value, // Get the comment value
      };

      // Send the data as a JSON string
      fetch(this.action, {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json', // Set content type to JSON
          },
          body: JSON.stringify(reviewData), // Convert the object to a JSON string
      })
      .then(response => {
          if (response.ok) {
              Swal.fire({
                  icon: 'success',
                  title: 'Review Added!',
                  text: 'Your review has been successfully added.',
                  timer: 1500,
                  showConfirmButton: false,
                  position: 'top-end',
                  toast: true,
              });
              setTimeout(() => {
                  location.reload(); // Reload the page to see the new review
              }, 1500);
          }else if (response.status === 401) {
        Swal.fire({
            icon: 'error',
            title: 'Review Not Added',
            text: 'Please login to post a review.',
            position: 'top-end',
            toast: true,
        });
    }
          else if (response.status === 400) {
        Swal.fire({
            icon: 'error',
            title: 'Review Not Added',
            text: 'You can only post one review per product.',
            position: 'top-end',
            toast: true,
        });
    }
           else {
              Swal.fire({
                  icon: 'error',
                  title: 'Failed to Add Review',
                  text: 'There was an error adding your review.',
                  position: 'top-end',
                  toast: true,
              });
          }
      })
      .catch(error => {
          console.error('Error:', error);
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An unexpected error occurred.',
              position: 'top-end',
              toast: true,
          });
      });
  });
</script>
<script>
  function removeReview(reviewId) {
    return fetch(`/reviews/remove/${reviewId}`, { // Add return here
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
    })
    .then(response => {
        console.log('Removing review with ID:', reviewId);
        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Review Removed!',
                text: 'Your review has been successfully removed.',
                timer: 1500,
                showConfirmButton: false,
                position: 'top-end',
                toast: true,
            });
            setTimeout(() => {
                location.reload(); // Reload the page to see the changes
            }, 1500);
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Failed to Remove Review',
                text: 'There was an error removing your review.',
                position: 'top-end',
                toast: true,
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred.',
            position: 'top-end',
            toast: true,
        });
    });
}
  </script>
</body>


</html>

<%- include("../../views/partials/user/footer") %>