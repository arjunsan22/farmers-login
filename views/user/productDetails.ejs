<%- include("../../views/partials/user/header") %>
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= product.productname %> - Product Details</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/zooming/2.1.1/zooming.min.js"></script>
  
  <style>
    /* Custom styles for product details page */
    body {
      background-color: #f8f9fa;
    }

    h1 {
      font-size: 2.5rem;
      font-weight: bold;
    }

    .card {
      border-radius: 12px;
    }

    .card-body {
      padding: 2rem;
    }

    button {
      font-size: 1.1rem;
    }

    .zoom-image {
      transition: transform 0.3s ease;
      cursor: pointer;
    }

    .zoom-image:hover {
      transform: scale(1.1); /* Slight zoom effect on hover */
    }

    .breadcrumb {
      background-color: #f8f9fa;
      font-size: 1rem;
      border-radius: 0.25rem;
    }

    .breadcrumb-item a {
      color: #007bff;
      text-decoration: none;
    }

    .breadcrumb-item.active {
      color: #6c757d;
    }

    .zoomWindow {
      border: 1px solid #000;
      background: white;
      z-index: 1000;
    }

    .stars {
      font-size: 30px;
      color: gold;
    }

    /* Related Products Section */
    .related-products .card {
      border: 1px solid #ddd;
      border-radius: 8px;
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .related-products .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
    }

    .related-products .card-img-top {
      border-top-left-radius: 8px;
      border-top-right-radius: 8px;
      height: 200px;
      object-fit: cover;
    }

    .related-products .card-body {
      padding: 1rem;
    }

    .related-products .card-title {
      font-size: 1.2rem;
      font-weight: bold;
    }

    .related-products .card-text {
      font-size: 1rem;
      color: #555;
    }

    .related-products .btn-cart {
      background-color: #007bff;
      color: #fff;
      border: none;
      transition: background-color 0.3s ease-in-out;
    }

    .related-products .btn-cart:hover {
      background-color: #0056b3;
    }

    .related-products .btn-outline-danger {
      border-color: #dc3545;
      color: #dc3545;
      transition: background-color 0.3s ease-in-out;
    }

    .related-products .btn-outline-danger:hover {
      background-color: #dc3545;
      color: #fff;
    }
    @keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes slideOut {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

.toast.showing {
  animation: slideIn 0.5s forwards;
}

.toast.hide {
  animation: slideOut 0.5s forwards;
}


.toast-container {
            z-index: 1055;
        }
        .toast {
            opacity: 0;
            transform: translateY(-100%);
            transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
        }
        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }
        .toast-header {
            background-color: #343a40;
            color: #fff;
        }
        .toast-body {
            background-color: #9f211d;
            color: #fff;
        }
        .wishlist-button.active {
            color: red;
        }
        .review-container {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    background-color: #f9f9f9;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.review-container:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

.review-container label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
}

.review-container select,
.review-container textarea,
.review-container button {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
}

.review-container button {
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.review-container button:hover {
    background-color: #0056b3;
}
.review-container {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    background-color: #f9f9f9;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.review-container:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

.review-container h2 {
    font-size: 24px;
    margin-bottom: 15px;
    color: #333;
    text-align: center;
}

.review-container ul {
    list-style-type: none;
    padding: 0;
}

.review-container li {
    border-bottom: 1px solid #ddd;
    padding: 10px 0;
    transition: background-color 0.3s ease;
}

.review-container li:hover {
    background-color: #f1f1f1;
}

.stars {
    color: #ccc; /* Light gray for unfilled stars */
}

.stars .filled {
    color: #ffcc00; /* Gold color for filled stars */
}

.stars span {
    font-size: 20px; /* Adjust size as needed */
    margin-right: 2px; /* Space between stars */
    transition: transform 0.2s;
}
.stars span:hover {
    transform: scale(1.2); /* Scale up on hover */
}

.review-container p {
    margin: 5px 0;
    font-size: 16px;
}

.review-container small {
    display: block;
    color: #666;
    font-size: 14px;
    margin-top: 5px;
}
/* now */
    .star-rating {
        display: flex;
        flex-direction: row-reverse;
        justify-content: start;
        gap: 5px;
    }

    .star-rating input {
        display: none;
    }

    .star-rating label {
        font-size: 25px;
        color: gray;
        cursor: pointer;
    }

    .star-rating input:checked ~ label {
        color: gold;
    }

    .star-rating label:hover,
    .star-rating label:hover ~ label {
        color: gold;
    }
  </style>
</head>

<body>
  <!-- BREADCRUMBS -->
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/shop">Products</a></li>
      <li class="breadcrumb-item active" aria-current="page"><%= product.productname %></li>
    </ol>
  </nav>

  <!-- STARTING -->

  <div class="container my-5">
    <div class="card shadow-lg border-0">
      <div class="row g-0">
        <!-- Product Image -->
        <div class="col-md-6">
          <!-- Carousel -->
          <div id="productImagesCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
              <% product.productImage.forEach((image, index) => { %>
                <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                  <img id="zoom-image-<%= index %>" src="/uploads/product-images/<%= image %>" data-zoom-image="/uploads/product-images/<%= image %>" class="d-block w-100 zoom-image" alt="<%= product.productname %> Image <%= index + 1 %>">
                </div>
              <% }) %>
            </div>

            <!-- Controls -->
            <button class="carousel-control-prev" type="button" data-bs-target="#productImagesCarousel" data-bs-slide="prev">
              <span class="carousel-control-prev-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#productImagesCarousel" data-bs-slide="next">
              <span class="carousel-control-next-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Next</span>
            </button>
          </div>
        </div>

        <!-- Product Details -->
        <div class="col-md-6">
          <div class="card-body">
            <h4 class="card-title text-dark mb-4"><%= product.productname %></h4>
            <h5 class="text-muted"><del style="color: #dc3545;"> Price: ‚Çπ<%= product.mainPrice %></del></h5>
            <h5 class="text-success">Price: ‚Çπ<span id="salePrice"><%= product.salePrice %></span></h5>
            <p class="mt-4"><strong>Description:</strong> <%= product.description %></p>
            <p><strong>Category:</strong> <%= product.category.name %></p>
            <p class="mt-4"><strong>More:</strong> <%= product.tag %></p>
            <p><strong>Quantity Available:</strong> <%= product.quantity %> kg</p>
            <div id="outOfStockMessage" class="text-danger" style="display: none;">Out of Stock</div>
                <!-- <p><strong>Quantity Available:</strong> <span id="availableQuantity"><%= product.quantity %></span> kg</p> -->

            <div class="offer-banner bg-warning text-center text-white p-3 rounded mt-4">
              üéâ Limited Time Offer! Get <strong>100 OFF</strong> on purchase above 500. Enter your coupon code with this: <span class="text-danger">AS2</span> at checkout! üéÅ
            </div>

            <!-- Quantity and Action Buttons -->
            <div class="mt-4">
              <div class="input-group mb-3" style="align-items: center;">
                <button 
                  class="btn btn-outline-secondary" 
                  type="button" 
                  id="decreaseQuantity" 
                  style="background-color: lightblue; border-color: blue; color: darkblue; width: 40px; height: 40px;">
                  -
                </button>
                <input 
                  type="text" 
                  class="form-control text-center" 
                  id="quantity" 
                  value="1" 
                  readonly 
                  style="text-align: center; font-size: 16px; width: 10px; margin: 0 10px;">
                  <span style="font-size: 16px; font-weight:600;">KG</span>
                <button 
                  class="btn btn-outline-secondary" 
                  type="button" 
                  id="increaseQuantity" 
                  style="background-color: lightblue; border-color: blue; color: darkblue; width: 40px; height: 40px;">
                  +
                </button>
              </div>
              <br>
              <!-- <button class="btn btn-dark btn-lg mt-3" id="buyNowButton">
                Buy Now
              </button> -->
              <script>
                
              </script>
              <br>
              <br>
              
              <button class="btn btn-cart btn-warning" id="addToCartButton" onclick="addToCart('<%=product._id%>')">
                <i class="fas fa-shopping-cart"></i> addToCart
              </button>

              <div id="wishlistButton" class="position-absolute top-0 end-0 p-2">
                <button class="btn btn-outline-danger btn-sm add-to-wishlist" data-product-id="<%= product._id%>">
                    <i class="fas fa-heart"></i>
                </button>
            
              </div>

<!-- add reviews -->
<div class="review-container">
  <h2 class="text-danger">Add Review</h2>
  <form id="reviewForm" action="/products/<%= product._id %>/review" method="POST">
      <label class="text-danger">Give Rating:</label>
      <div class="star-rating">
          <input type="radio" id="star5" name="rating" value="5" required />
          <label for="star5">‚òÖ</label>
          <input type="radio" id="star4" name="rating" value="4" required />
          <label for="star4">‚òÖ</label>
          <input type="radio" id="star3" name="rating" value="3" required />
          <label for="star3">‚òÖ</label>
          <input type="radio" id="star2" name="rating" value="2" required />
          <label for="star2">‚òÖ</label>
          <input type="radio" id="star1" name="rating" value="1" required />
          <label for="star1">‚òÖ</label>
      </div>

      <label for="comment">Comment:</label>
      <textarea name="comment" required></textarea>
      <button type="submit" class="btn btn-primary">Submit Review</button>
  </form>
</div>
              <br>
              <!-- showing reviews -->
              <div class="review-container">
                <h2 class="text-danger">Reviews</h2>
                <% if (product.reviews.length > 0) { %>
                    <ul>
                        <% product.reviews.forEach(review => { %>
                            <li class="text-success">
                                <strong><%= review.userId.firstname %> <%= review.userId.lastname %>:</strong>
                                <div class="stars">
                                    <% for (let i = 1; i <= 5; i++) { %>
                                        <span class="<%= i <= review.rating ? 'filled' : '' %>">‚òÖ</span>
                                    <% } %>
                                </div>
                                <p><%= review.comment %></p>
                                <small>Reviewed on: <%= review.createdOn.toLocaleDateString() %></small>
                                <% if (user && user._id.equals(review.userId._id)) { %>
                                    <button style="background-color: #9f211d;" class="btn btn-danger" onclick="removeReview('<%= review._id %>')">Remove</button>
                                <% } %>
                            </li>
                        <% }); %>
                    </ul>
                <% } else { %>
                    <p>No reviews yet.</p>
                <% } %>
            </div>
              
              <br>
              <div>
                <a href="/" class="btn btn-dark btn-lg">
                  <i class="bi bi-arrow-left"></i> Back to Home
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast Notification -->
  <div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toast-message" class="toast text-bg-success" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Notification</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Product added to cart successfully!
      </div>
    </div>
    <div id="toast-out-of-stock" class="toast text-bg-danger" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Notification</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Product is out of stock!
      </div>
    </div>

    <div id="toast-not-login" class="toast text-bg-danger" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Notification</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Please log in to add products to your cart !
      </div>
    </div>
  </div>

  <!-- Related Products Section -->
  <% if (relatedProducts && relatedProducts.length > 0) { %>
    <section>
      <div class="related-products mt-5 container">
        <h2 class="mb-4 text-danger text-center" style="font-size: 32px; font-weight: 900; font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;">
          RELATED PRODUCTS AND VARIANTS
        </h2>
        <div class="row">
          <% relatedProducts.forEach((relatedProduct) => { %>
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
              <div class="card shadow-sm h-100">
                <a href="/productDetails/<%= relatedProduct._id %>">
                  <img src="/uploads/product-images/<%= relatedProduct.productImage[0] %>" class="card-img-top product-img" alt="<%= relatedProduct.productname %>">
                </a>
                <div class="card-body d-flex flex-column justify-content-between">

                    <div class="position-absolute top-0 end-0 p-2">
                      <button class="btn btn-outline-danger btn-sm add-to-wishlist" data-product-id="<%= relatedProduct._id %>">
                          <i class="fas fa-heart"></i>
                      </button>
                  </div>
                  <h5 class="card-title fw-bold"><%= relatedProduct.productname %></h5>
                  <p class="card-text text-muted">‚Çπ <%= relatedProduct.mainPrice %></p>
                  <div class="stars">
                    ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ <p style="font-size: medium;">4.5 ratings</p>
                  </div>
                  <div class="d-flex justify-content-between mt-3">
                    <button class="btn btn-cart" onclick="addToCart('<%=relatedProduct._id%>')">
                      <i class="fas fa-shopping-cart"></i> Add to Cart
                    </button>
                  </div>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
      </div>
    </a>
    </section>
  <% } %> 
  <script>
    function showToast(message, isSuccess) {
      const toastElement = document.getElementById('toast-message');
      const toastBody = toastElement.querySelector('.toast-body');

      
      toastBody.textContent = message;
      if (isSuccess) {
          toastElement.classList.remove('text-bg-danger');
          toastElement.classList.add('text-bg-success');
      } else {
          toastElement.classList.remove('text-bg-success');
          toastElement.classList.add('text-bg-danger');
      }

      const toast = new bootstrap.Toast(toastElement);
      toast.show();
    }

    function showOutOfStockToast() {
      const toastElement = document.getElementById('toast-out-of-stock');
      const toast = new bootstrap.Toast(toastElement);
      toast.show();
    }

    function showusernotloginToast() {
      const toastElement = document.getElementById('toast-not-login');
      const toast = new bootstrap.Toast(toastElement);
      toast.show();
    }
    
    function addToCart(productId) {
        const userId = "<%= user ? user._id : '' %>"; 
        const quantity = parseInt(document.getElementById('quantity').value);
        
        // Check if quantity exceeds the limit//
        if (quantity > 5) {
            showToast('You can only add up to 5 quantities of this product to your cart.', false);
            return;
        }
        if (quantity == 0) {
            showOutOfStockToast();
            return;
        }

        if (!userId) {
            showusernotloginToast();
            return;
        }

        fetch('/add-to-cart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId: userId,
                productId: productId,
                quantity: quantity
            })
        })
        .then(response => {
            return response.json().then(data => {
                if (!response.ok) {
                    throw new Error(data.message || 'Network response was not ok');
                }
                return data;
            });
        })
        .then(data => {
            if (data.success) {
                showToast('Product added to cart successfully!', true);
            } else {
                showToast('Failed to add product to cart: ' + data.message, false);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('Problem: ' + error.message, false);
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
      const zooming = new Zooming({
        bgColor: 'white',
        bgOpacity: 0.8,
        scaleBase: 0.8,
        scaleExtra: 1.2,
        scrollThreshold: 50,
        transitionDuration: 0.4
      });

      zooming.listen('.zoom-image');
    });
</script>
<script>
    const quantityInput = document.getElementById('quantity');
    const salePriceElement = document.getElementById('salePrice');
    const availableQuantityElement = document.getElementById('availableQuantity');
    const outOfStockMessage = document.getElementById('outOfStockMessage');
    const addToCartButton = document.getElementById('addToCartButton');
    const buyNowButton = document.getElementById('buyNowButton');
    const increaseQuantityButton = document.getElementById('increaseQuantity');
    const decreaseQuantityButton = document.getElementById('decreaseQuantity');
    const initialSalePrice = parseFloat("<%= product.salePrice %>");
    let availableQuantity = parseInt("<%= product.quantity %>");

    function updateUI() {
        const quantity = parseInt(quantityInput.value);
        salePriceElement.textContent = (initialSalePrice * quantity).toFixed(2);
        availableQuantityElement.textContent = availableQuantity - quantity;

        if (availableQuantity - quantity <= 0) {
            outOfStockMessage.style.display = 'block';
            addToCartButton.disabled = true;
            buyNowButton.disabled = true;
            increaseQuantityButton.disabled = true;
            showOutOfStockToast();
        } else {
            outOfStockMessage.style.display = 'none';
            addToCartButton.disabled = false;
            buyNowButton.disabled = false;
            increaseQuantityButton.disabled = quantity >= 5 || quantity >= availableQuantity;
        }

        decreaseQuantityButton.disabled = quantity <= 1;
    }

    increaseQuantityButton.addEventListener('click', () => {
        let quantity = parseInt(quantityInput.value);
        if (quantity < availableQuantity && quantity < 5) { // Limit to 5
            quantity++;
            quantityInput.value = quantity;
            updateUI();
        } else if (quantity >= 5) {
            showToast('You can only add up to 5 quantities of this product to your cart.', false);
        } else if (quantity >= availableQuantity) {
            showOutOfStockToast();
        }
    });

    decreaseQuantityButton.addEventListener('click', () => {
        let quantity = parseInt(quantityInput.value);
        if (quantity > 1) {
            quantity--;
            quantityInput.value = quantity;
            updateUI();
        }
    });

    document.addEventListener('DOMContentLoaded', updateUI);
</script>
 <!-- Toast Notification -->
 <div class="toast-container position-fixed top-0 end-0 p-3">
  <div id="wishlistToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
          <strong class="me-auto">Notification</strong>
          <button  type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
          <!-- Toast message will be inserted here -->
      </div>
  </div>
</div>


<!-- wishlist -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
  document.addEventListener('DOMContentLoaded', function() {
      const wishlistButtons = document.querySelectorAll('.add-to-wishlist');
      const toastElement = document.getElementById('wishlistToast');
      const toastBody = toastElement.querySelector('.toast-body');
      const toast = new bootstrap.Toast(toastElement);

      wishlistButtons.forEach(button => {
          button.addEventListener('click', async function(event) {
              event.preventDefault();
              const productId = this.getAttribute('data-product-id');

              try {
                  const response = await fetch('/wishlist/add', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({ productId })
                  });

                  const result = await response.json();

                  if (result.success) {
                      toastBody.textContent = result.message;
                      toast.show();
                  } else {
                      toastBody.textContent = result.message;
                      toast.show();
                  }
              } catch (error) {
                  toastBody.textContent = 'An error occurred. Please try again later.';
                  toast.show();
              }
          });
      });
  });
  </script>

  <!--Add and  remove review -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.getElementById('reviewForm').addEventListener('submit', function(event) {
      event.preventDefault(); // Prevent the default form submission

      // Create an object to hold the form data
      const reviewData = {
          rating: this.rating.value, // Get the rating value
          comment: this.comment.value, // Get the comment value
      };

      // Send the data as a JSON string
      fetch(this.action, {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json', // Set content type to JSON
          },
          body: JSON.stringify(reviewData), // Convert the object to a JSON string
      })
      .then(response => {
          if (response.ok) {
              Swal.fire({
                  icon: 'success',
                  title: 'Review Added!',
                  text: 'Your review has been successfully added.',
                  timer: 1500,
                  showConfirmButton: false,
                  position: 'top-end',
                  toast: true,
              });
              setTimeout(() => {
                  location.reload(); // Reload the page to see the new review
              }, 1500);
          }else if (response.status === 401) {
        Swal.fire({
            icon: 'error',
            title: 'Review Not Added',
            text: 'Please login to post a review.',
            position: 'top-end',
            toast: true,
        });
    }
          else if (response.status === 400) {
        Swal.fire({
            icon: 'error',
            title: 'Review Not Added',
            text: 'You can only post one review per product.',
            position: 'top-end',
            toast: true,
        });
    }
           else {
              Swal.fire({
                  icon: 'error',
                  title: 'Failed to Add Review',
                  text: 'There was an error adding your review.',
                  position: 'top-end',
                  toast: true,
              });
          }
      })
      .catch(error => {
          console.error('Error:', error);
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An unexpected error occurred.',
              position: 'top-end',
              toast: true,
          });
      });
  });
</script>
<script>
  function removeReview(reviewId) {
    return fetch(`/reviews/remove/${reviewId}`, { // Add return here
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
    })
    .then(response => {
        console.log('Removing review with ID:', reviewId);
        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Review Removed!',
                text: 'Your review has been successfully removed.',
                timer: 1500,
                showConfirmButton: false,
                position: 'top-end',
                toast: true,
            });
            setTimeout(() => {
                location.reload(); // Reload the page to see the changes
            }, 1500);
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Failed to Remove Review',
                text: 'There was an error removing your review.',
                position: 'top-end',
                toast: true,
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred.',
            position: 'top-end',
            toast: true,
        });
    });
}
  </script>
</body>


</html>

<%- include("../../views/partials/user/footer") %>