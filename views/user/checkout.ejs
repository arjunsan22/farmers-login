<%- include("../../views/partials/user/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <style>
    .coupon-card {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .coupon-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    .coupon-card .card-title {
      font-size: 1.25rem;
      font-weight: bold;
    }
    .coupon-card .card-text {
      font-size: 1rem;
    }
    .coupon-card .btn {
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    .coupon-card .btn-primary:hover {
      background-color: #0056b3;
      color: #fff;
    }
    .coupon-card .btn-danger:hover {
      background-color: #c82333;
      color: #fff;
    }
  </style>
</head>
<body>
  <div class="container my-5">
    <h2 class="text-center mb-4">Checkout</h2>
    <div class="card shadow p-4 mb-4">
      <h4>Order Details</h4>
      <% products.forEach((product, index) => { %>
          <div class="product-item <%= index !== products.length - 1 ? 'border-bottom mb-3 pb-3' : '' %>">
              <p><strong>Product:</strong> <%= product.productname %></p>
              <p><strong>Quantity:</strong> <%= product.quantity %> kg</p>
              <p><strong>Price per kg:</strong> ₹<%= product.salePrice.toFixed(2) %></p>
              <p><strong>Total:</strong> ₹<%= product.totalPrice.toFixed(2) %></p>
          </div>
      <% }); %>
    </div>
    <!-- Coupon Section -->
    <div class="card shadow p-4 mb-4">
      <h4>Apply Coupon</h4>
      <div class="row">
        <% availableCoupons.forEach((coupon) => { %>
          <div class="col-md-6 mb-3">
            <div class="card coupon-card">
              <div class="card-body">
                <h5 class="card-title"><%= coupon.couponCode %></h5>
                <p class="card-text"><%= coupon.description %></p>
                <p class="card-text"><strong>Offer:</strong> ₹<%= coupon.offerPrice %> off</p>
                <p class="card-text"><strong>Minimum Purchase:</strong> ₹<%= coupon.minimumPrice %></p>
                <p class="card-text"><strong>Valid From:</strong> <%= new Date(coupon.startOn).toLocaleDateString() %> <strong>To:</strong> <%= new Date(coupon.expireOn).toLocaleDateString() %></p>
                <button class="btn btn-primary apply-coupon" data-coupon-code="<%= coupon.couponCode %>">Apply</button>
                <button class="btn btn-danger ms-2 remove-coupon" type="button" data-coupon-code="<%= coupon.couponCode %>">Remove</button>
              </div>
            </div>
          </div>
        <% }); %>
      </div>
      <div id="couponFeedback" class="text-danger"></div>
    </div>

    <div class="mt-3 pt-3 border-top">
      <h5 class="text-end">
        <strong>Cart Total:</strong>
        <span id="cartTotalDisplay">₹<%= cartTotal.toFixed(2) %></span>
      </h5>
      <h5 class="text-end text-success">
        <strong>Discount:</strong>
        ₹<span id="discount">0.00</span>
      </h5>
      <h5 class="text-end">
        <strong>Final Total:</strong>
        ₹<span id="finalTotal"><%= cartTotal.toFixed(2) %></span>
      </h5>
      <div id="couponFeedback" class="text-danger mt-2"></div>
    </div>

    <form id="checkoutForm" action="/process-order" method="POST" class="card shadow p-4">
      <% products.forEach((product, index) => { %>
        <input type="hidden" name="products[]" value="<%= product._id %>">
        <input type="hidden" name="quantities[]" value="<%= product.quantity %>">
      <% }); %>
      <h4>Choose an Address</h4>
      <div class="row">
        <% userAddress.forEach((address, index) => { %>
          <div class="col-md-6 mb-3">
            <div class="card">
              <div class="card-body">
                <p class="card-text">
                  <strong>Name:</strong> <%= address.name %><br>
                  <strong>City:</strong> <%= address.city %><br>
                  <strong>Street Mark:</strong> <%= address.StreetMark %><br>
                  <strong>State:</strong> <%= address.state %><br>
                  <strong>Pincode:</strong> <%= address.pincode %><br>
                  <strong>Phone:</strong> <%= address.Phone %><br>
                  <strong>Second Phone:</strong> <%= address.SecondPhone %><br>
                  <strong>House No:</strong> <%= address.Houseno %>
                </p>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="address" value="<%= address._id %>" id="address<%= index %>" required>
                  <label class="form-check-label" for="address<%= index %>">
                    Select this address
                  </label>
                  <a href="/EditCheckoutAddress/<%= address._id %>" class="btn btn-warning">Edit</a>
                </div>
              </div>
            </div>
          </div>
        <% }) %>
      </div>
      <div>
        <a href="/loadCheckoutUserAddressPage" class="btn btn-primary">Add Another Address</a>
      </div>
      <hr>
      <div class="mb-3">
        <label for="paymentMethod" class="form-label">Payment Method</label>
        <select class="form-select" id="paymentMethod" name="paymentMethod" required>
          <option value="cod">Cash on Delivery</option>
          <option value="wallet">Wallet</option>
          <option value="razorpay">Razorpay</option>

        </select>
      </div>
      <div class="text-center">
        <button type="submit" class="btn btn-success btn-lg">Place Order</button>
      </div>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.querySelectorAll('.apply-coupon').forEach(button => {
      button.addEventListener('click', async () => {
        const couponCode = button.getAttribute('data-coupon-code');
        const feedbackElement = document.getElementById('couponFeedback');
        feedbackElement.innerText = '';

        try {
          const response = await fetch('/applyCoupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ couponCode }),
          });

          const result = await response.json();

          if (response.ok) {
            feedbackElement.style.color = 'green';
            feedbackElement.innerText = result.message;

            // Update totals dynamically
            document.getElementById('cartTotalDisplay').innerText = `₹${result.originalTotal.toFixed(2)}`;
            document.getElementById('discount').innerText = result.discount.toFixed(2);
            document.getElementById('finalTotal').innerText = `₹${result.finalTotal.toFixed(2)}`;
          } else {
            feedbackElement.style.color = 'red';
            feedbackElement.innerText = result.message;
          }
        } catch (error) {
          feedbackElement.style.color = 'red';
          feedbackElement.innerText = 'An error occurred. Please try again later.';
        }
      });
    });
    document.querySelectorAll('.remove-coupon').forEach(button => {
    button.addEventListener('click', async () => {
      const couponCode = button.getAttribute('data-coupon-code');
      const feedbackElement = document.getElementById('couponFeedback');
      feedbackElement.innerText = '';

      try {
        const response = await fetch('/removeCoupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ couponCode }),
        });

        const result = await response.json();

        if (response.ok) {
          feedbackElement.style.color = 'green';
          feedbackElement.innerText = result.message;

          // Reset totals dynamically
          document.getElementById('cartTotalDisplay').innerText = `₹<%= cartTotal.toFixed(2) %>`;
          document.getElementById('discount').innerText = '0.00';
          document.getElementById('finalTotal').innerText = `₹<%= cartTotal.toFixed(2) %>`;
        } else {
          feedbackElement.style.color = 'red';
          feedbackElement.innerText = result.message;
        }
      } catch (error) {
        feedbackElement.style.color = 'red';
        feedbackElement.innerText = 'An error occurred. Please try again later.';
      }
    });
  });
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  $(document).ready(function () {
    $("#checkoutForm").submit(function (event) {
      event.preventDefault();
      const form = $(this)[0];
      const formData = new FormData(form);
      const paymentMethod = $("#paymentMethod").val();

      // Debug log the form data
      console.log("Form Data Contents:");
      formData.forEach((value, key) => {
        console.log(key + ": " + value);
      });

      if (paymentMethod === "razorpay") {
        const amount = parseFloat($("#finalTotal").text().replace("₹", "")) 

        $.ajax({
          url: "/create-razorpay-order",
          type: "POST",
          contentType: "application/json",
          data: JSON.stringify({ amount, currency: "INR" }),
          success: function (order) {
            console.log("Razorpay order created:", order);

            const options = {
              key: "<%= razorpayKeyId %>",
              amount: order.amount,
              currency: order.currency,
              name: "Farmers Login",
              description: "Test Transaction",
              order_id: order.id,
              handler: function (response) {
                console.log("Razorpay payment success:", response);

                // Create a new FormData object with the form data
                const finalFormData = new FormData(form);
                
                // Add Razorpay response to formData
                finalFormData.append("razorpay_payment_id", response.razorpay_payment_id);
                finalFormData.append("razorpay_order_id", response.razorpay_order_id);
                finalFormData.append("razorpay_signature", response.razorpay_signature);

                // Convert FormData to object for proper submission
                const formDataObj = {};
                finalFormData.forEach((value, key) => {
                  if (key.endsWith('[]')) {
                    const baseKey = key.slice(0, -2);
                    if (!formDataObj[baseKey]) {
                      formDataObj[baseKey] = [];
                    }
                    formDataObj[baseKey].push(value);
                  } else {
                    formDataObj[key] = value;
                  }
                });

                // Log the data being sent
                console.log("Submitting order with data:", formDataObj);

                $.ajax({
                  url: "/process-order",
                  type: "POST",
                  data: JSON.stringify(formDataObj),
                  contentType: "application/json",
                  success: function (resultJson) {
                    console.log("Order processing result:", resultJson);
                    if (resultJson.success) {
                      window.location.href = `/order-success/${resultJson.orderId}`;
                    } else {
                      alert(resultJson.message || 'Order processing failed');
                    }
                  },
                  error: function(xhr, status, error) {
                    console.error("Order processing error:", error);
                    alert('An error occurred while processing your order');
                  }
                });
              },
              prefill: {
                name: "ARJUN SANDHYA",
                email: "arjsan@example.com",
                contact: "8590924576",
              },
              theme: {
                color: "#3399cc",
              },
              modal: {
                ondismiss: function() {
                  console.log("Razorpay modal dismissed");
                }
              }
            };

            const rzp1 = new Razorpay(options);
            rzp1.on('payment.failed', function (response) {
              console.error("Payment failed:", response.error);
              alert(response.error.description);
            });
            rzp1.open();
          },
          error: function(xhr, status, error) {
            console.error("Error creating Razorpay order:", error);
            alert('Error creating payment order');
          }
        });
      } else {
        // For non-Razorpay payments (COD, wallet)
        console.log("Processing non-Razorpay payment:", paymentMethod);
        
        // Convert FormData to object for proper submission
        const formDataObj = {};
        formData.forEach((value, key) => {
          if (key.endsWith('[]')) {
            const baseKey = key.slice(0, -2);
            if (!formDataObj[baseKey]) {
              formDataObj[baseKey] = [];
            }
            formDataObj[baseKey].push(value);
          } else {
            formDataObj[key] = value;
          }
        });

        // Log the data being sent
        console.log("Submitting order with data:", formDataObj);
        
        $.ajax({
          url: "/process-order",
          type: "POST",
          data: JSON.stringify(formDataObj),
          contentType: "application/json",
          success: function (resultJson) {
            console.log("Order processing result:", resultJson);
            if (resultJson.success) {
              window.location.href = `/order-success/${resultJson.orderId}`;
            } else {
              alert(resultJson.message || 'Order processing failed');
            }
          },
          error: function(xhr, status, error) {
            console.error("Order processing error:", error);
            alert('An error occurred while processing your order');
          }
        });
      }
    });
  });
</script>

</body>
</html>
<%- include("../../views/partials/user/footer") %>