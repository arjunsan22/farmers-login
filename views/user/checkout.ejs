<%- include("../../views/partials/user/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <style>
       .coupon-card {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .coupon-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    .coupon-card .card-title {
      font-size: 1.25rem;
      font-weight: bold;
    }
    .coupon-card .card-text {
      font-size: 1rem;
    }
    .coupon-card .btn {
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    .coupon-card .btn-primary:hover {
      background-color: #0056b3;
      color: #fff;
    }
    .coupon-card .btn-danger:hover {
      background-color: #c82333;
      color: #fff;
    }
    /* Hide remove buttons by default */
    .remove-coupon {
      display: none;
    }
    .breadcrumb {
    background-color: #f8f9fa;
    padding: 10px 15px;
    border-radius: 0.25rem;
    margin-bottom: 1rem;
}

.breadcrumb-item a {
    color: #007bff;
    text-decoration: none;
}

.breadcrumb-item a:hover {
    color: #0056b3;
}
  </style>
</head>
<body>
  <div class="container my-5">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item"><a href="/cart">Cart</a></li>
          <li class="breadcrumb-item active" aria-current="page">Checkout</li>
      </ol>
  </nav>
    <h2 class="text-center mb-4">Checkout</h2>
    <div class="card shadow p-4 mb-4">
      <h4>Order Details</h4>
      <% products.forEach((product, index) => { %>
          <div class="product-item <%= index !== products.length - 1 ? 'border-bottom mb-3 pb-3' : '' %>">
              <p><strong>Product:</strong> <%= product.productname %></p>
              <p><strong>Quantity:</strong> <%= product.quantity %> kg</p>
              <p><strong>Price per kg:</strong> ₹<%= product.salePrice.toFixed(2) %></p>
              <p><strong>Total:</strong> ₹<%= product.totalPrice.toFixed(2) %></p>
          </div>
      <% }); %>
    </div>
        <!-- Coupon Section -->
    <div class="card shadow p-4 mb-4">
      <h4>Apply Coupon</h4>
      <!-- Custom Coupon Input -->
      <div class="mb-4">
        <!-- <div class="input-group">
          <input type="text" class="form-control" id="customCouponInput" 
                 placeholder="Enter coupon code" 
                 value="<%= session.couponApplied ? session.couponApplied.code : '' %>">
          <button class="btn btn-primary" id="applyCustomCoupon" 
                  style="display: <%= session.couponApplied ? 'none' : 'inline-block' %>">Apply</button>
          <button class="btn btn-danger ms-2" id="removeCustomCoupon" 
                  style="display: <%= session.couponApplied ? 'inline-block' : 'none' %>">Remove</button>
      </div> -->
      <div class="input-group">
        <input type="text" class="form-control" id="customCouponInput" 
               placeholder="Enter coupon code" 
               value="<%= session?.couponApplied?.code || '' %>">
        <button class="btn btn-primary <%= session?.couponApplied ? 'd-none' : 'd-inline-block' %>" 
                id="applyCustomCoupon">Apply</button>
        <button class="btn btn-danger ms-2 <%= session?.couponApplied ? 'd-inline-block' : 'd-none' %>" 
                id="removeCustomCoupon">Remove</button>
    </div>
        <div id="customCouponFeedback" class="mt-2"></div>
      </div>
      <h5>Available Coupons</h5>
      <div class="row">
        <% availableCoupons.forEach((coupon) => { %>
          <div class="col-md-6 mb-3">
            <div class="card coupon-card">
              <div class="card-body">
                <h5 class="card-title"><%= coupon.couponCode %></h5>
                <p class="card-text"><%= coupon.description %></p>
                <p class="card-text"><strong>Offer:</strong> ₹<%= coupon.offerPrice %> off</p>
                <p class="card-text"><strong>Minimum Purchase:</strong> ₹<%= coupon.minimumPrice %></p>
                <p class="card-text"><strong>Valid From:</strong> <%= new Date(coupon.startOn).toLocaleDateString() %> <strong>To:</strong> <%= new Date(coupon.expireOn).toLocaleDateString() %></p>
                <button class="btn btn-secondary copy-coupon" data-coupon-code="<%= coupon.couponCode %>">Use This Coupon</button>
              </div>
            </div>
          </div>
        <% }); %>
      </div>
    </div>


    <div class="mt-3 pt-3 border-top">
      <h5 class="text-end">
        <strong>Cart Total:</strong>
        <span id="cartTotalDisplay">₹<%= session.couponApplied ? session.couponApplied.originalTotal.toFixed(2) : cartTotal.toFixed(2) %></span>
      </h5>
      <h5 class="text-end text-success">
        <strong>Discount:</strong>
        ₹<span id="discount"><%= session.couponApplied ? session.couponApplied.discount.toFixed(2) : '0.00' %></span>
      </h5>
      <h5 class="text-end">
        <strong>Final Total  :</strong>
       <span id="finalTotal"><%= session.couponApplied ? session.couponApplied.finalTotal.toFixed(2) : cartTotal.toFixed(2) %></span>
      </h5>
      <div id="couponFeedback" class="text-danger mt-2"></div>
    </div>

    <form id="checkoutForm" action="/process-order" method="POST" class="card shadow p-4">
      <% products.forEach((product, index) => { %>
        <input type="hidden" name="products[]" value="<%= product._id %>">
        <input type="hidden" name="quantities[]" value="<%= product.quantity %>">
      <% }); %>
      <h4>Choose an Address</h4>
      <div class="row">
        <% userAddress.forEach((address, index) => { %>
          <div class="col-md-6 mb-3">
            <div class="card">
              <div class="card-body">
                <p class="card-text">
                  <strong>Name:</strong> <%= address.name %><br>
                  <strong>City:</strong> <%= address.city %><br>
                  <strong>Street Mark:</strong> <%= address.StreetMark %><br>
                  <strong>State:</strong> <%= address.state %><br>
                  <strong>Pincode:</strong> <%= address.pincode %><br>
                  <strong>Phone:</strong> <%= address.Phone %><br>
                  <strong>Second Phone:</strong> <%= address.SecondPhone %><br>
                  <strong>House No:</strong> <%= address.Houseno %>
                </p>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="address" value="<%= address._id %>" id="address<%= index %>" required>
                  <label class="form-check-label" for="address<%= index %>">
                    Select this address
                  </label>
                  <a href="/EditCheckoutAddress/<%= address._id %>" class="btn btn-warning">Edit</a>
                </div>
              </div>
            </div>
          </div>
        <% }) %>
      </div>
      <div>
        <a href="/loadCheckoutUserAddressPage" class="btn btn-primary">Add Another Address</a>
      </div>
      <hr>
      <div class="mb-3">
        <label for="paymentMethod" class="form-label">Payment Method</label>
        <select class="form-select" id="paymentMethod" name="paymentMethod" required>
          <option value="">Select Payment Method</option>
          <option value="cod" id="codOption">Cash on Delivery</option>
        <%if(wallet && wallet.balance>=finalTotal){%>
          <option value="wallet">Wallet</option>
        <%}else{%>
        <strong> <option class="text-danger" disabled> Wallet payment not available. Your Wallet Balance is ₹<%= wallet?.balance %> You need to pay ₹<%= finalTotal %> for this order</option></strong> 
          <%}%>
          <option value="razorpay">Razorpay</option>
        </select>
        <small id="codWarning" class="text-danger d-none">
          Cash on Delivery is not available for orders above ₹1,000. Please choose a different payment method.
        </small>
      </div>
      <div class="text-center">
        <button type="submit" class="btn btn-success btn-lg">Place Order</button>
      </div>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Initialize coupon state from session data when page loads
    document.addEventListener('DOMContentLoaded', () => {
        const sessionData = JSON.parse(` <%- JSON.stringify(session.couponApplied || null) %>`);
            if (sessionData) {
            // Fill in the coupon input
            document.getElementById('customCouponInput').value = sessionData.code;
            
            // Update the totals
            const cartTotalDisplay = document.getElementById('cartTotalDisplay');
            const discountElement = document.getElementById('discount');
            const finalTotalElement = document.getElementById('finalTotal');

            if (cartTotalDisplay) cartTotalDisplay.innerText = `₹${sessionData.originalTotal.toFixed(2)}`;
            if (discountElement) discountElement.innerText = sessionData.discount.toFixed(2);
            if (finalTotalElement) finalTotalElement.innerText = `₹${sessionData.finalTotal.toFixed(2)}`;

            // Show remove button and hide apply button
            document.getElementById('applyCustomCoupon').style.display = 'none';
            document.getElementById('removeCustomCoupon').style.display = 'inline-block';

            // Show success feedback
            document.getElementById('customCouponFeedback').innerHTML = `
                <div class="alert alert-success">
                    Coupon "${sessionData.code}" applied successfully!
                </div>
            `;
        }
    });

    // Copy coupon code to input
    document.querySelectorAll('.copy-coupon').forEach(button => {
        button.addEventListener('click', () => {
            const couponCode = button.getAttribute('data-coupon-code');
            document.getElementById('customCouponInput').value = couponCode;
            // Automatically trigger the apply button
            document.getElementById('applyCustomCoupon').click();
        });
    });

    // Apply coupon handler
    document.getElementById('applyCustomCoupon').addEventListener('click', async () => {
        const couponCode = document.getElementById('customCouponInput').value.trim();
        if (!couponCode) {
            Swal.fire({
                icon: 'warning',
                title: 'Empty Coupon',
                text: 'Please enter a coupon code',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
            return;
        }

        try {
            const response = await fetch('/applyCoupon', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ couponCode }),
            });

            const result = await response.json();
            console.log('Coupon response:', result);

            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Applied!',
                    text: result.message,
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });

                // Update totals
                const cartTotalDisplay = document.getElementById('cartTotalDisplay');
                const discountElement = document.getElementById('discount');
                const finalTotalElement = document.getElementById('finalTotal');

                if (cartTotalDisplay) cartTotalDisplay.innerText = `₹${result.originalTotal.toFixed(2)}`;
                if (discountElement) discountElement.innerText = result.discount.toFixed(2);
                if (finalTotalElement) finalTotalElement.innerText = `₹${result.finalTotal.toFixed(2)}`;

                // Show remove button and hide apply button
                document.getElementById('applyCustomCoupon').style.display = 'none';
                document.getElementById('removeCustomCoupon').style.display = 'inline-block';

                // Show success feedback
                document.getElementById('customCouponFeedback').innerHTML = `
                    <div class="alert alert-success">
                        Coupon "${couponCode}" applied successfully!
                    </div>
                `;
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Coupon',
                    text: result.message || 'This coupon code is not valid',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
            }
        } catch (error) {
            console.error('Error applying coupon:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while applying the coupon',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        }
    });

    // Remove coupon handler
    document.getElementById('removeCustomCoupon').addEventListener('click', async () => {
        const couponCode = document.getElementById('customCouponInput').value.trim();
        
        try {
            const response = await fetch('/removeCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ couponCode }),
            });

            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Removed',
                    text: result.message,
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });

                // Reset totals
                const cartTotalDisplay = document.getElementById('cartTotalDisplay');
                const discountElement = document.getElementById('discount');
                const finalTotalElement = document.getElementById('finalTotal');

                if (cartTotalDisplay) cartTotalDisplay.innerText = `₹<%= cartTotal.toFixed(2) %>`;
                if (discountElement) discountElement.innerText = '0.00';
                if (finalTotalElement) finalTotalElement.innerText = `₹<%= cartTotal.toFixed(2) %>`;

                // Reset UI
                document.getElementById('customCouponInput').value = '';
                document.getElementById('customCouponFeedback').innerHTML = '';
                document.getElementById('applyCustomCoupon').style.display = 'inline-block';
                document.getElementById('removeCustomCoupon').style.display = 'none';
            }
        } catch (error) {
            console.error('Error removing coupon:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to remove coupon',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        }
    });
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  console.log("Razorpay script loaded");
</script>
<script>
$(document).ready(function () {
  function updateCODAvailability() {
    const totalAmount = parseFloat($("#finalTotal").text().replace("₹", ""));
    const codOption = $("#codOption");
    const codWarning = $("#codWarning");
    const paymentMethod = $("#paymentMethod");

    if (totalAmount > 1000) {
      codOption.prop('disabled', true);
      codWarning.removeClass('d-none');
      if (paymentMethod.val() === 'cod') {
        paymentMethod.val('');
      }
    } else {
      codOption.prop('disabled', false);
      codWarning.addClass('d-none');
    }
  }

  updateCODAvailability();

  $(document).on('totalAmountUpdated', function() {
    updateCODAvailability();
  });

  $("#checkoutForm").submit(function (event) {
    event.preventDefault();
    const form = $(this)[0];
    const formData = new FormData(form);
    const paymentMethod = $("#paymentMethod").val();

    console.log("Form Data Contents:");
    formData.forEach((value, key) => {
      console.log(key + ": " + value);
    });

    if (paymentMethod === "razorpay") {
      const amount = parseFloat($("#finalTotal").text().replace("₹", "")) 
      console.log("Amount being processed:", amount);
      
      $.ajax({
        url: "/create-razorpay-order",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify({ amount, currency: "INR" }),
        success: function (order) {
          console.log("Razorpay order created:", order);

          const options = {
            key: "<%= razorpayKeyId %>",
            amount: order.amount,
            currency: order.currency,
            name: "Farmers Login",
            description: "Test Transaction",
            order_id: order.id,
            handler: function (response) {
              console.log("Razorpay payment success:", response);

              const finalFormData = new FormData(form);
              finalFormData.append("razorpay_payment_id", response.razorpay_payment_id);
              finalFormData.append("razorpay_order_id", response.razorpay_order_id);
              finalFormData.append("razorpay_signature", response.razorpay_signature);

              const formDataObj = {};
              finalFormData.forEach((value, key) => {
                if (key.endsWith('[]')) {
                  const baseKey = key.slice(0, -2);
                  if (!formDataObj[baseKey]) {
                    formDataObj[baseKey] = [];
                  }
                  formDataObj[baseKey].push(value);
                } else {
                  formDataObj[key] = value;
                }
              });

              console.log("Submitting order with data:", formDataObj);

              $.ajax({
                url: "/process-order",
                type: "POST",
                data: JSON.stringify(formDataObj),
                contentType: "application/json",
                success: function (resultJson) {
                  console.log("Order processing result:", resultJson);
                  if (resultJson.success) {
                    window.location.href = `/order-success/${resultJson.orderId}`;
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Order Failed',
                      text: resultJson.message || 'Order processing failed',
                      confirmButtonColor: '#d33',
                      confirmButtonText: 'OK'
                    });
                  }
                },
                error: function(xhr, status, error) {
                  console.error("Order processing error:", error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while processing your order',
                    confirmButtonColor: '#d33',
                    confirmButtonText: 'OK'
                  });
                }
              });
            },
            prefill: {
              name: "ARJUN SANDHYA",
              email: "arjsan@example.com",
              contact: "8590924576",
            },
            theme: {
              color: "#3399cc",
            },
            modal: {
              ondismiss: function() {
                console.log("Razorpay modal dismissed");
              }
            }
          };

          const rzp1 = new Razorpay(options);
          
          rzp1.on('payment.failed', function (response) {
            console.error("Payment failed details:", response);
            
            const formDataObj = {};
            formData.forEach((value, key) => {
              if (key.endsWith('[]')) {
                const baseKey = key.slice(0, -2);
                if (!formDataObj[baseKey]) {
                  formDataObj[baseKey] = [];
                }
                formDataObj[baseKey].push(value);
              } else {
                formDataObj[key] = value;
              }
            });
            
            // Add payment failure details
            formDataObj.paymentMethod = 'razorpay';
            formDataObj.payment_status = 'failed';
            formDataObj.payment_error = response.error.description;
            formDataObj.razorpay_order_id = response.error.metadata.order_id;
            
            $.ajax({
              url: "/process-order",
              type: "POST",
              data: JSON.stringify(formDataObj),
              contentType: "application/json",
              success: function (resultJson) {
                console.log("Failed payment order result:", resultJson);
                Swal.fire({
                  icon: 'error',
                  title: 'Payment Failed',
                  text: response.error.description || 'Your payment failed. Please try again.',
                  confirmButtonColor: '#d33',
                  confirmButtonText: 'View Order'
                }).then(() => {
                  if (resultJson.orderId) {
                    window.location.href = '/order-history';
                  }
                });
              },
              error: function(xhr, status, error) {
                console.error("Order processing error:", error);
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: 'An error occurred while processing your order',
                  confirmButtonColor: '#d33',
                  confirmButtonText: 'OK'
                });
              }
            });
          });
          
          rzp1.open();
        },
        error: function(xhr, status, error) {
          console.error("Error creating Razorpay order:", error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error creating payment order',
            confirmButtonColor: '#d33',
            confirmButtonText: 'OK'
          });
        }
      });
    } else {
      // For non-Razorpay payments (COD, wallet)
      console.log("Processing non-Razorpay payment:", paymentMethod);
      
      const formDataObj = {};
      formData.forEach((value, key) => {
        if (key.endsWith('[]')) {
          const baseKey = key.slice(0, -2);
          if (!formDataObj[baseKey]) {
            formDataObj[baseKey] = [];
          }
          formDataObj[baseKey].push(value);
        } else {
          formDataObj[key] = value;
        }
      });

      console.log("Submitting order with data:", formDataObj);
      
      $.ajax({
        url: "/process-order",
        type: "POST",
        data: JSON.stringify(formDataObj),
        contentType: "application/json",
        success: function (resultJson) {
          console.log("Order processing result:", resultJson);
          console.log("Payment method:", paymentMethod);
          console.log("Response status:", resultJson.status);

          if (resultJson.success) {
            window.location.href = `/order-success/${resultJson.orderId}`;
          } else {
            if (resultJson.status === 'cod_restricted') {
              Swal.fire({
                icon: 'error',
                title: 'COD Not Available',
                text: resultJson.message,
                confirmButtonColor: '#d33',
                confirmButtonText: 'OK'
              });
            } else if (paymentMethod === 'wallet' && resultJson.status === 'insufficient_balance') {
              Swal.fire({
                icon: 'error',
                title: 'Insufficient Wallet Balance',
                text: 'You do not have enough balance in your wallet to complete this purchase.',
                confirmButtonColor: '#d33',
                confirmButtonText: 'OK'
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Order Failed',
                text: resultJson.message || 'Order processing failed',
                confirmButtonColor: '#d33',
                confirmButtonText: 'OK'
              });
            }
          }
        },
        error: function(xhr, status, error) {
          console.error("Order processing error:", error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while processing your order',
            confirmButtonColor: '#d33',
            confirmButtonText: 'OK'
          });
        }
      });
    }
  });
});
</script>


</body>
</html>
<%- include("../../views/partials/user/footer") %>