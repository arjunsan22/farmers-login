<%- include("../../views/partials/user/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <style>
       .coupon-card {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .coupon-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }
    .coupon-card .card-title {
      font-size: 1.25rem;
      font-weight: bold;
    }
    .coupon-card .card-text {
      font-size: 1rem;
    }
    .coupon-card .btn {
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    .coupon-card .btn-primary:hover {
      background-color: #0056b3;
      color: #fff;
    }
    .coupon-card .btn-danger:hover {
      background-color: #c82333;
      color: #fff;
    }
    /* Hide remove buttons by default */
    .remove-coupon {
      display: none;
    }
    .breadcrumb {
    background-color: #f8f9fa;
    padding: 10px 15px;
    border-radius: 0.25rem;
    margin-bottom: 1rem;
}

.breadcrumb-item a {
    color: #007bff;
    text-decoration: none;
}

.breadcrumb-item a:hover {
    color: #0056b3;
}

    .form-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.75rem;
        font-size: 1.1rem;
    }

    .form-select {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%232c3e50' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1em;
        padding: 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        font-size: 1rem;
        color: #2c3e50;
        transition: all 0.3s ease;
        cursor: pointer;
        box-shadow: 0 2px 4px rgba(0,0,0,0.02);
    }

    .form-select:hover {
        border-color: #90cdf4;
        box-shadow: 0 4px 6px rgba(66, 153, 225, 0.08);
    }

    .form-select:focus {
        border-color: #4299e1;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);
        outline: none;
    }

    .form-select option {
        padding: 1rem;
        font-size: 1rem;
        background-color: white;
        color: #2c3e50;
    }

    .form-select option:first-child {
        color: #718096;
        font-style: italic;
    }

    .form-select option:hover {
        background-color: #ebf8ff;
    }

    .form-select option:checked {
        background-color: #4299e1;
        color: white;
    }

    .form-select option:disabled {
        background-color: #f7fafc;
        color: #e53e3e;
        font-weight: 500;
        padding: 1rem;
        border-left: 4px solid #e53e3e;
    }

    .text-danger {
        color: #e53e3e;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        padding: 0.5rem;
        border-radius: 8px;
        background-color: rgba(229, 62, 62, 0.1);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .text-danger::before {
        content: "‚ö†Ô∏è";
    }

    .mb-3 {
        position: relative;
        margin-bottom: 1.5rem;
    }

    /* Add payment method icons */
    .form-select option[value="cod"]::before {
        content: "üíµ";
        margin-right: 8px;
    }

    .form-select option[value="wallet"]::before {
        content: "üëõ";
        margin-right: 8px;
    }

    .form-select option[value="razorpay"]::before {
        content: "üí≥";
        margin-right: 8px;
    }
  </style>
  <style>
    /* Coupon Section Styles */
    .coupon-section {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    .coupon-header {
        background: linear-gradient(135deg, orange 0%, #3182ce 100%);
        padding: 1.5rem;
        color: white;
        position: relative;
    }

    .coupon-header h4 {
        margin: 0;
        font-weight: 600;
        font-size: 1.5rem;
    }

    .coupon-input-group {
        background: white;
        border-radius: 15px;
        padding: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        margin: 1rem 0;
    }

    .coupon-input-group input {
        border: none;
        padding: 1rem;
        font-size: 1rem;
        background: transparent;
    }

    .coupon-input-group input:focus {
        box-shadow: none;
        outline: none;
    }

    .coupon-input-group .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .coupon-list {
        max-height: 400px;
        overflow-y: auto;
        padding: 1rem;
    }

    .coupon-card {
        background: white;
        border-radius: 15px;
        border: 2px dashed #e2e8f0;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .coupon-card::before {
        content: '';
        position: absolute;
        left: -20px;
        top: 50%;
        height: 40px;
        width: 40px;
        background: #f8f9fa;
        border-radius: 50%;
        transform: translateY(-50%);
        box-shadow: inset 0 0 10px rgba(0,0,0,0.1);
    }

    .coupon-card::after {
        content: '';
        position: absolute;
        right: -20px;
        top: 50%;
        height: 40px;
        width: 40px;
        background: #f8f9fa;
        border-radius: 50%;
        transform: translateY(-50%);
        box-shadow: inset 0 0 10px rgba(0,0,0,0.1);
    }

    .coupon-card:hover {
        transform: translateY(-5px);
        border-color: #4299e1;
        box-shadow: 0 10px 20px rgba(66, 153, 225, 0.1);
    }

    .coupon-content {
        padding: 1.5rem;
    }

    .coupon-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    .coupon-description {
        color: #718096;
        font-size: 0.875rem;
        margin-bottom: 1rem;
    }

    .coupon-details {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
        margin-bottom: 1rem;
        font-size: 0.875rem;
    }

    .coupon-detail-item {
        background: #f7fafc;
        padding: 0.5rem;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .coupon-detail-item i {
        color: #4299e1;
    }

    .copy-coupon {
        width: 100%;
        background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
        color: white;
        border: none;
        padding: 0.75rem;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .copy-coupon:hover {
        background: linear-gradient(135deg, #3182ce 0%, #2c5282 100%);
        transform: translateY(-2px);
    }

    .copy-coupon:active {
        transform: translateY(0);
    }

    /* Custom scrollbar for coupon list */
    .coupon-list::-webkit-scrollbar {
        width: 8px;
    }

    .coupon-list::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    .coupon-list::-webkit-scrollbar-thumb {
        background: #cbd5e0;
        border-radius: 10px;
    }

    .coupon-list::-webkit-scrollbar-thumb:hover {
        background: #a0aec0;
    }
</style>

</head>
<body>
  <div class="container my-5">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item"><a href="/cart">Cart</a></li>
          <li class="breadcrumb-item active" aria-current="page">Checkout</li>
      </ol>
  </nav>
    <h2 class="text-center mb-4">Checkout</h2>
    <div class="card shadow p-4 mb-4">
      <h4>Order Details</h4>
      <% products.forEach((product, index) => { %>
          <div class="product-item <%= index !== products.length - 1 ? 'border-bottom mb-3 pb-3' : '' %>">
              <p><strong>Product:</strong> <%= product.productname %></p>
              <p><strong>Quantity:</strong> <%= product.quantity %> <%=product.unit %></p>
              <p><strong>Price per  <%=product.unit %>:</strong> ‚Çπ<%= product.salePrice.toFixed(2) %></p>
              <p><strong>Total:</strong> ‚Çπ<%= product.totalPrice.toFixed(2) %></p>
          </div>
      <% }); %>
    </div>
        <!-- Coupon Section -->
        <div class="coupon-section shadow p-0 mb-4">
          <div class="coupon-header">
              <h4>Apply Coupon</h4>
          </div>
          <div class="p-4">
              <!-- Custom Coupon Input -->
              <div class="coupon-input-group">
                  <div class="input-group">
                      <input type="text" class="form-control" id="customCouponInput" 
                             placeholder="Enter coupon code" 
                             value="<%= session?.couponApplied?.code || '' %>">
                      <button class="btn btn-primary" value="<%= session?.couponApplied ? 'd-none' : 'd-inline-block' %>" 
                              id="applyCustomCoupon">Apply</button>
                      <button class="btn btn-danger" value="<%= session?.couponApplied ? 'd-inline-block' : 'd-none' %>"
                              id="removeCustomCoupon">Remove</button>
                  </div>
                  <div id="customCouponFeedback" class="mt-2"></div>
              </div>
      
              <h5 class="mt-4 mb-3">Available Coupons</h5>
              <div class="coupon-list">
                  <div class="row">
                      <% availableCoupons.forEach((coupon) => { %>
                          <div class="col-md-6 mb-3">
                              <div class="coupon-card">
                                  <div class="coupon-content">
                                      <div class="coupon-title"><%= coupon.couponCode %></div>
                                      <div class="coupon-description"><%= coupon.description %></div>
                                      <div class="coupon-details">
                                          <div class="coupon-detail-item">
                                              <i class="fas fa-tag"></i>
                                              <span>‚Çπ<%= coupon.offerPrice %> off</span>
                                          </div>
                                          <div class="coupon-detail-item">
                                              <i class="fas fa-shopping-cart"></i>
                                              <span>Min: ‚Çπ<%= coupon.minimumPrice %></span>
                                          </div>
                                          <div class="coupon-detail-item">
                                              <i class="fas fa-calendar-alt"></i>
                                              <span>From: <%= new Date(coupon.startOn).toLocaleDateString() %></span>
                                          </div>
                                          <div class="coupon-detail-item">
                                              <i class="fas fa-clock"></i>
                                              <span>To: <%= new Date(coupon.expireOn).toLocaleDateString() %></span>
                                          </div>
                                      </div>
                                      <button class="copy-coupon" data-coupon-code="<%= coupon.couponCode %>" >
                                          Use This Coupon
                                      </button>
                                  </div>
                              </div>
                          </div>
                      <% }); %>
                  </div>
              </div>
          </div>
      </div>

    <div class="mt-3 pt-3 border-top">
      <h5 class="text-end">
        <strong>Cart Total:</strong>
        <span id="cartTotalDisplay">‚Çπ<%= session.couponApplied ? session.couponApplied.originalTotal.toFixed(2) : cartTotal.toFixed(2) %></span>
      </h5>
      <h5 class="text-end text-success">
        <strong>Discount:</strong>
        ‚Çπ<span id="discount"><%= session.couponApplied ? session.couponApplied.discount.toFixed(2) : '0.00' %></span>
      </h5>
      <h5 class="text-end">
        <strong>Final Total  :</strong>
       <span id="finalTotal"><%= session.couponApplied ? session.couponApplied.finalTotal.toFixed(2) : cartTotal.toFixed(2) %></span>
      </h5>
      <div id="couponFeedback" class="text-danger mt-2"></div>
    </div>

    <form id="checkoutForm" action="/process-order" method="POST" class="card shadow p-4">
      <% products.forEach((product, index) => { %>
        <input type="hidden" name="products[]" value="<%= product._id %>">
        <input type="hidden" name="quantities[]" value="<%= product.quantity %>">
      <% }); %>
      <h4>Choose an Address</h4>
      <div class="row">
        <% userAddress.forEach((address, index) => { %>
          <div class="col-md-6 mb-3">
            <div class="card">
              <div class="card-body">
                <p class="card-text">
                  <strong>Name:</strong> <%= address.name %><br>
                  <strong>City:</strong> <%= address.city %><br>
                  <strong>Street Mark:</strong> <%= address.StreetMark %><br>
                  <strong>State:</strong> <%= address.state %><br>
                  <strong>Pincode:</strong> <%= address.pincode %><br>
                  <strong>Phone:</strong> <%= address.Phone %><br>
                  <strong>Second Phone:</strong> <%= address.SecondPhone %><br>
                  <strong>House No:</strong> <%= address.Houseno %>
                </p>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="address" value="<%= address._id %>" id="address<%= index %>" >
                  <label class="form-check-label" for="address<%= index %>">
                    Select this address
                  </label>
                  <a href="/EditCheckoutAddress/<%= address._id %>" class="btn btn-warning">Edit</a>
                </div>
              </div>
            </div>
          </div>
        <% }) %>
      </div>
      <div>
        <a href="/loadCheckoutUserAddressPage" class="btn btn-primary">Add Another Address</a>
      </div>
      <hr>
      <div class="mb-3">
        <label for="paymentMethod" class="form-label">Payment Method</label>
        <select class="form-select" id="paymentMethod" name="paymentMethod" required>
            <option value="">Select Payment Method</option>
            <option value="cod" id="codOption">Cash on Delivery</option>
            <%if(wallet && wallet.balance>=finalTotal){%>
                <option value="wallet">Wallet</option>
            <%}else{%>
                <strong><option class="text-danger" disabled>Wallet payment not available. Your Wallet Balance is ‚Çπ<%= wallet?.balance %> You need to pay ‚Çπ<%= finalTotal %> for this order</option></strong>
            <%}%>
            <option value="razorpay">Razorpay</option>
        </select>
        <small id="codWarning" class="text-danger d-none">
            Cash on Delivery is not available for orders above ‚Çπ1,000. Please choose a different payment method.
        </small>
    </div>
    
      <div class="text-center">
        <button type="submit" class="btn btn-success btn-lg">Place Order</button>
      </div>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Initialize coupon state from session data when page loads
    document.addEventListener('DOMContentLoaded', () => {
        const sessionData = JSON.parse(` <%- JSON.stringify(session.couponApplied || null) %>`);
            if (sessionData) {
            // Fill in the coupon input
            document.getElementById('customCouponInput').value = sessionData.code;
            
            // Update the totals
            const cartTotalDisplay = document.getElementById('cartTotalDisplay');
            const discountElement = document.getElementById('discount');
            const finalTotalElement = document.getElementById('finalTotal');

            if (cartTotalDisplay) cartTotalDisplay.innerText = `‚Çπ${sessionData.originalTotal.toFixed(2)}`;
            if (discountElement) discountElement.innerText = sessionData.discount.toFixed(2);
            if (finalTotalElement) finalTotalElement.innerText = `‚Çπ${sessionData.finalTotal.toFixed(2)}`;

            // Show remove button and hide apply button
            document.getElementById('applyCustomCoupon').style.display = 'none';
            document.getElementById('removeCustomCoupon').style.display = 'inline-block';

            // Show success feedback
            document.getElementById('customCouponFeedback').innerHTML = `
                <div class="alert alert-success">
                    Coupon "${sessionData.code}" applied successfully!
                </div>
            `;
        }
    });

    // Copy coupon code to input
    document.querySelectorAll('.copy-coupon').forEach(button => {
        button.addEventListener('click', () => {
            const couponCode = button.getAttribute('data-coupon-code');
            document.getElementById('customCouponInput').value = couponCode;
            // Automatically trigger the apply button
            document.getElementById('applyCustomCoupon').click();
        });
    });

    // Apply coupon handler
    document.getElementById('applyCustomCoupon').addEventListener('click', async () => {
        const couponCode = document.getElementById('customCouponInput').value.trim();
        if (!couponCode) {
            Swal.fire({
                icon: 'warning',
                title: 'Empty Coupon',
                text: 'Please enter a coupon code',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
            return;
        }

        try {
            const response = await fetch('/applyCoupon', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ couponCode }),
            });

            const result = await response.json();
            console.log('Coupon response:', result);

            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Applied!',
                    text: result.message,
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });

                // Update totals
                const cartTotalDisplay = document.getElementById('cartTotalDisplay');
                const discountElement = document.getElementById('discount');
                const finalTotalElement = document.getElementById('finalTotal');

                if (cartTotalDisplay) cartTotalDisplay.innerText = `‚Çπ${result.originalTotal.toFixed(2)}`;
                if (discountElement) discountElement.innerText = result.discount.toFixed(2);
                if (finalTotalElement) finalTotalElement.innerText = `‚Çπ${result.finalTotal.toFixed(2)}`;

                // Show remove button and hide apply button
                document.getElementById('applyCustomCoupon').style.display = 'none';
                document.getElementById('removeCustomCoupon').style.display = 'inline-block';

                // Show success feedback
                document.getElementById('customCouponFeedback').innerHTML = `
                    <div class="alert alert-success">
                        Coupon "${couponCode}" applied successfully!
                    </div>
                `;
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Coupon',
                    text: result.message || 'This coupon code is not valid',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
            }
        } catch (error) {
            console.error('Error applying coupon:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while applying the coupon',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        }
    });

    // Remove coupon handler
    document.getElementById('removeCustomCoupon').addEventListener('click', async () => {
        const couponCode = document.getElementById('customCouponInput').value.trim();
        
        try {
            const response = await fetch('/removeCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ couponCode }),
            });

            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Removed',
                    text: result.message,
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });

                // Reset totals
                const cartTotalDisplay = document.getElementById('cartTotalDisplay');
                const discountElement = document.getElementById('discount');
                const finalTotalElement = document.getElementById('finalTotal');

                if (cartTotalDisplay) cartTotalDisplay.innerText = `‚Çπ<%= cartTotal.toFixed(2) %>`;
                if (discountElement) discountElement.innerText = '0.00';
                if (finalTotalElement) finalTotalElement.innerText = `‚Çπ<%= cartTotal.toFixed(2) %>`;

                // Reset UI
                document.getElementById('customCouponInput').value = '';
                document.getElementById('customCouponFeedback').innerHTML = '';
                document.getElementById('applyCustomCoupon').style.display = 'inline-block';
                document.getElementById('removeCustomCoupon').style.display = 'none';
            }
        } catch (error) {
            console.error('Error removing coupon:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to remove coupon',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        }
    });
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  console.log("Razorpay script loaded");
</script>
<script>
$(document).ready(function () {
  function updateCODAvailability() {
    const totalAmount = parseFloat($("#finalTotal").text().replace("‚Çπ", ""));
    const codOption = $("#codOption");
    const codWarning = $("#codWarning");
    const paymentMethod = $("#paymentMethod");

    if (totalAmount > 1000) {
      codOption.prop('disabled', true);
      codWarning.removeClass('d-none');
      if (paymentMethod.val() === 'cod') {
        paymentMethod.val('');
      }
    } else {
      codOption.prop('disabled', false);
      codWarning.addClass('d-none');
    }
  }

  updateCODAvailability();

  $(document).on('totalAmountUpdated', function() {
    updateCODAvailability();
  });

  $("#checkoutForm").submit(async function (event) {
    event.preventDefault();
    const form = $(this)[0];
    const formData = new FormData(form);
    const paymentMethod = $("#paymentMethod").val();

    // Check if address is selected
    if (!formData.get('address')) {
      Swal.fire({
        icon: 'error',
        title: 'Address Required',
        text: 'Please select a delivery address',
        confirmButtonColor: '#d33',
        confirmButtonText: 'OK'
      });
      return;
    }

    console.log("Form Data Contents:");
    formData.forEach((value, key) => {
      console.log(key + ": " + value);
    });

    // Perform out-of-stock check before initiating Razorpay payment
    const products = [];
    const quantities = [];
    formData.forEach((value, key) => {
      if (key === 'products[]') {
        products.push(value);
      } else if (key === 'quantities[]') {
        quantities.push(value);
      }
    });

    try {
      const stockCheckResponse = await fetch('/check-stock', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ products, quantities }),
      });

      const stockCheckResult = await stockCheckResponse.json();

      if (!stockCheckResult.success) {
        Swal.fire({
          icon: 'error',
          title: 'Out of Stock',
          text: stockCheckResult.message,
          confirmButtonColor: '#d33',
          confirmButtonText: 'OK'
        });
        return;
      }
    } catch (error) {
      console.error('Error checking stock:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while checking stock',
        confirmButtonColor: '#d33',
        confirmButtonText: 'OK'
      });
      return;
    }

    if (paymentMethod === "razorpay") {
      const amount = parseFloat($("#finalTotal").text().replace("‚Çπ", ""));
      console.log("Amount being processed:", amount);

      $.ajax({
        url: "/create-razorpay-order",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify({ amount, currency: "INR" }),
        success: function (order) {
          console.log("Razorpay order created:", order);

          const options = {
            key: "<%= razorpayKeyId %>",
            amount: order.amount,
            currency: order.currency,
            name: "Farmers Login",
            description: "Test Transaction",
            order_id: order.id,
            handler: function (response) {
              console.log("Razorpay payment success:", response);

              const finalFormData = new FormData(form);
              finalFormData.append("razorpay_payment_id", response.razorpay_payment_id);
              finalFormData.append("razorpay_order_id", response.razorpay_order_id);
              finalFormData.append("razorpay_signature", response.razorpay_signature);

              const formDataObj = {};
              finalFormData.forEach((value, key) => {
                if (key.endsWith('[]')) {
                  const baseKey = key.slice(0, -2);
                  if (!formDataObj[baseKey]) {
                    formDataObj[baseKey] = [];
                  }
                  formDataObj[baseKey].push(value);
                } else {
                  formDataObj[key] = value;
                }
              });

              console.log("Submitting order with data:", formDataObj);

              $.ajax({
                url: "/process-order",
                type: "POST",
                data: JSON.stringify(formDataObj),
                contentType: "application/json",
                success: function (resultJson) {
                  console.log("Order processing result:", resultJson);
                  if (resultJson.success) {
                    window.location.href = `/order-success/${resultJson.orderId}`;
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Order Failed',  
                      text: resultJson.message || 'Order processing failed',
                      confirmButtonColor: '#d33',
                      confirmButtonText: 'OK'
                    });
                  }
                },
                error: function(xhr, status, error) {
                  console.error("Order processing error:", error);
                  let errorResponse;
                  try {
                    errorResponse = JSON.parse(xhr.responseText);
                  } catch (e) {
                    errorResponse = {
                      status: 'error',
                      message: 'An error occurred while processing your order'
                    };
                  }
                  handleOrderError(errorResponse);
                }
              });
            },
            prefill: {
              name: "ARJUN SANDHYA",
              email: "arjsan@example.com",
              contact: "8590924576",
            },
            theme: {
              color: "#3399cc",
            },
            modal: {
              ondismiss: function() {
                console.log("Razorpay modal dismissed");
              }
            }
          };

          const rzp1 = new Razorpay(options);

          rzp1.on('payment.failed', function (response) {
            console.error("Payment failed details:", response);

            const formDataObj = {};
            formData.forEach((value, key) => {
              if (key.endsWith('[]')) {
                const baseKey = key.slice(0, -2);
                if (!formDataObj[baseKey]) {
                  formDataObj[baseKey] = [];
                }
                formDataObj[baseKey].push(value);
              } else {
                formDataObj[key] = value;
              }
            });

            // Add payment failure details
            formDataObj.paymentMethod = 'razorpay';
            formDataObj.payment_status = 'failed';
            formDataObj.payment_error = response.error.description;
            formDataObj.razorpay_order_id = response.error.metadata.order_id;

            $.ajax({
              url: "/process-order",
              type: "POST",
              data: JSON.stringify(formDataObj),
              contentType: "application/json",
              success: function (resultJson) {
                console.log("Failed payment order result:", resultJson);
                Swal.fire({
                  icon: 'error',
                  title: 'Payment Failed',
                  text: response.error.description || 'Your payment failed. Please try again.',
                  confirmButtonColor: '#d33',
                  confirmButtonText: 'View Order'
                }).then(() => {
                  if (resultJson.orderId) {
                    window.location.href = '/order-history';
                  }
                });
              },
              error: function(xhr, status, error) {
                console.error("Order processing error:", error);
                let errorResponse;
                try {
                  errorResponse = JSON.parse(xhr.responseText);
                } catch (e) {
                  errorResponse = {
                    status: 'error',
                    message: 'An error occurred while processing your order'
                  };
                }
                handleOrderError(errorResponse);
              }
            });
          });

          rzp1.open();
        },
        error: function(xhr, status, error) {
          console.error("Order processing error:", error);
          let errorResponse;
          try {
            errorResponse = JSON.parse(xhr.responseText);
          } catch (e) {
            errorResponse = {
              status: 'error',
              message: 'An error occurred while processing your order'
            };
          }
          handleOrderError(errorResponse);
        }
      });
    } else {
      // For non-Razorpay payments (COD, wallet)
      console.log("Processing non-Razorpay payment:", paymentMethod);

      const formDataObj = {};
      formData.forEach((value, key) => {
        if (key.endsWith('[]')) {
          const baseKey = key.slice(0, -2);
          if (!formDataObj[baseKey]) {
            formDataObj[baseKey] = [];
          }
          formDataObj[baseKey].push(value);
        } else {
          formDataObj[key] = value;
        }
      });

      console.log("Submitting order with data:", formDataObj);

      $.ajax({
        url: "/process-order",
        type: "POST",
        data: JSON.stringify(formDataObj),
        contentType: "application/json",
        success: function (resultJson) {
          console.log("Order processing result:", resultJson);
          console.log("Payment method:", paymentMethod);
          console.log("Response status:", resultJson.status);

          if (resultJson.success) {
            window.location.href = `/order-success/${resultJson.orderId}`;
          } else {
            handleOrderError(resultJson);
          }
        },
        error: function(xhr, status, error) {
          console.error("Order processing error:", error);
          let errorResponse;
          try {
            errorResponse = JSON.parse(xhr.responseText);
          } catch (e) {
            errorResponse = {
              status: 'error',
              message: 'An error occurred while processing your order'
            };
          }
          handleOrderError(errorResponse);
        }
      });
    }
  });

  // Function to handle different error scenarios
  function handleOrderError(response) {
    let title = 'Order Failed';
    let text = 'An error occurred while processing your order';

    switch (response?.status) {
      case 'address_missing':
        title = 'Address Required';
        text = 'Please select a delivery address';
        break;
      case 'out_of_stock':
        title = 'Products Out of Stock';
        text = response.message || 'Some products in your cart are out of stock';
        break;
      case 'cod_restricted':
        title = 'COD Not Available';
        text = 'Cash on Delivery is not available for orders above ‚Çπ1,000';
        break;
      case 'insufficient_balance':
        title = 'Insufficient Wallet Balance';
        text = 'You do not have enough balance in your wallet to complete this purchase';
        break;
      case 'unauthorized':
        title = 'Session Expired';
        text = 'Please login again to continue';
        setTimeout(() => {
          window.location.href = '/login';
        }, 2000);
        break;
      case 'invalid_products':
        title = 'Invalid Products';
        text = 'Some products in your cart are no longer available';
        break;
    }

    Swal.fire({
      icon: 'error',
      title: title,
      text: text,
      confirmButtonColor: '#d33',
      confirmButtonText: 'OK'
    });
  }
});
</script>

</body>
</html>
<%- include("../../views/partials/user/footer") %>